openapi: 3.0.2
info:
    title: Tugboat API
    version: '3.4.0'
    contact:
        name: Tugboat Support
        url: https://www.tugboatqa.com/support
        email: support@tugboatqa.com
    termsOfService: https://www.tugboatqa.com/terms
    x-logo:
        url: https://assets.tugboatqa.com/logo/logo_horizontal_dark.svg
        href: '#'
        altText: Tugboat
    description: |
        # Authentication

        All API requests require authentication. A `401 Unauthorized` is returned if authentication is invalid or
        omitted.

        A `404 Not Found` is returned for both legitimate "Not Found" situations, as well as for "Permission Denied"
        situations. This is done to prevent accidental leakage of private information.

servers:
    - url: https://api.tugboatqa.com/v3

tags:
    - name: Compatibility

      ##  Parts of a tugboat are used as compatibility flags for API changes that break backward compatibility
      ##  These flags are currently in use:
      ##
      ##    - Accept: application/vnd.tugboat.propeller+json
      ##      Formats Repo envvars as the newer array of objects, instead of an array of strings

      description: |
          The HTTP API major version is used to access the API, such as `/v3`. Backward compatibility is maintained
          between major versions.

          New features or bug fixes may be added as minor versions over time. When this introduces a backward
          incompatibility, the original functionality will be maintained by default. The new functionality can be
          accessed by passing an `Accept` header with the right compatibility flag enabled. These instances are clearly
          identified in this document.

          Deprecated features will continue to function as expected until the next major version, and are clearly
          identified in this documentation.

paths:
    /version:
        get:
            summary: API Version
            tags:
                - Compatibility
            x-code-samples:
                - lang: Shell
                  source: |
                      curl https://api.tugboatqa.com/v3/version
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat version
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    api:
                                        type: string
                                        description: The API version
                                        example: '3.1'
                                    server:
                                        type: string
                                        description: The Tugboat Server version
                                        example: 2.20.1

    ### Keys

    /keys:
        get:
            summary: List API Keys
            description: Returns an array of API Keys that belong to the authenticated user
            tags:
                - API Keys
            security:
                - API Key: []
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                          https://api.tugboatqa.com/v3/keys
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list keys
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Key'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'

        post:
            summary: Create an API Key
            description: Creates a new API Key for the authenticated user
            tags:
                - API Keys
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "name": "My API Key" }' \
                           https://api.tugboatqa.com/v3/keys
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat create key name="My API Key"
            responses:
                201:
                    description: Successfully created a new API Key
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NewKey'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'

    /keys/{id}:
        get:
            summary: Get an API Key
            description: |
            tags:
                - API Keys
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the API Key
                  schema:
                      $ref: '#/components/schemas/KeyId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/keys/5d9b5bfb52163ce4e1508c07
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b5bfb52163ce4e1508c07
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown API Key
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownKeyError'

        patch:
            summary: Update an API Key
            description: |
            tags:
                - API Keys
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the API Key
                  schema:
                      $ref: '#/components/schemas/KeyId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "name": "My Updated API Key" }' \
                           https://api.tugboatqa.com/v3/keys/5d9b5bfb52163ce4e1508c07
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5d9b5bfb52163ce4e1508c07 name="My Updated API Key"
            responses:
                200:
                    description: Successfully updated the API Key
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown API Key
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownKeyError'

        delete:
            summary: Delete an API Key
            description: |
            tags:
                - API Keys
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the API Key
                  schema:
                      $ref: '#/components/schemas/KeyId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/keys/5d9b5bfb52163ce4e1508c07
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5d9b5bfb52163ce4e1508c07
            responses:
                204:
                    description: Successfully deleted the API Key
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown API Key
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownKeyError'

    ### Objects
    /objects/{id}:
        get:
            summary: Get a Tugboat object
            description: |
            tags:
                - Objects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Tugboat Object
                  schema:
                      $ref: '#/components/schemas/ObjectId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/objects/5d810c19f6f8203d5b65ef01
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat find 5d810c19f6f8203d5b65ef01
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Object'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Object

    ### Projects

    /projects:
        get:
            summary: List Projects
            description: Returns an array of Projects that the authenticated user has access to
            tags:
                - Projects
            security:
                - API Key: []
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                          https://api.tugboatqa.com/v3/projects
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list projects
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Project'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'

    /projects/{id}:
        get:
            summary: Get a Project
            description: |
            tags:
                - Projects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Project
                  schema:
                      $ref: '#/components/schemas/ProjectId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/projects/5d810c19f6f8203d5b65ef01
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d810c19f6f8203d5b65ef01
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

        patch:
            summary: Update a Project
            description: |
            tags:
                - Projects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Project
                  schema:
                      $ref: '#/components/schemas/ProjectId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "name": "New Project Name" }' \
                           https://api.tugboatqa.com/v3/projects/5d810c19f6f8203d5b65ef01
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5d810c19f6f8203d5b65ef01 name="New Project Name"
            responses:
                200:
                    description: Successfully updated the Project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

        delete:
            summary: Delete a Project
            description: |
            tags:
                - Projects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Project
                  schema:
                      $ref: '#/components/schemas/ObjectId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/projects/5d810c19f6f8203d5b65ef01
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5d810c19f6f8203d5b65ef01
            responses:
                204:
                    description: Successfully deleted the Project
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

    /projects/{id}/repos:
        get:
            summary: Get Project Repositories
            tags:
                - Projects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Project
                  schema:
                      $ref: '#/components/schemas/ProjectId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/projects/5d810c19f6f8203d5b65ef01/repos
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list repos project=5d810c19f6f8203d5b65ef01
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Repo'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

    /projects/{id}/jobs:
        get:
            summary: Get Project Jobs
            description: |
            tags:
                - Projects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Project
                  schema:
                      $ref: '#/components/schemas/ProjectId'
                - name: limit
                  in: query
                  description: Return this many of the most recent results
                  schema:
                      type: integer
                - name: children
                  in: query
                  description:
                      Return jobs for the Repositories, Previews, and Services that belong to the Project as well as the
                      Project Jobs
                  schema:
                      type: boolean
                      default: false
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/projects/5d810c19f6f8203d5b65ef01/jobs
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list jobs 5d810c19f6f8203d5b65ef01
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/ProjectJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

    /projects/{id}/statistics/{item}:
        get:
            summary: Get Project Statistics
            description: |
            tags:
                - Projects
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Project
                  schema:
                      $ref: '#/components/schemas/ProjectId'
                - name: item
                  in: path
                  required: true
                  description: The requested type of data
                  schema:
                      $ref: '#/components/schemas/Statistics/properties/item'
                - name: limit
                  in: query
                  description: Return this many of the most recent results, applied after any other filters
                  schema:
                      type: integer
                      default: 20
                - name: before
                  in: query
                  description: Only return results that were gathered at or before this date/time
                  schema:
                      type: string
                      format: date-time
                - name: after
                  in: query
                  description: Only return results that were gathered at or after this date/time
                  schema:
                      type: string
                      format: date-time
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/projects/5d810c19f6f8203d5b65ef01/statistics/size
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Statistics'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

    ### Repositories

    /repos:
        post:
            summary: Create a Repository
            description: |
                ### Bitbucket

                When creating a Bitbucket repository, one of the following sets of `auth` parameters are required. If
                multiple sets are specified, they are tried in the order shown here.

                1. OAuth: `access`
                1. Application Password: `user`, `token`
                1. Username/Password: `user`, `pass`

                When using username/password authentication for a Bitbucket repository , Tugboat **does not** store
                these values. It uses them to acquire an OAuth token from the Bitbucket API, then discards the provided
                username & password values. Username/password authentication cannot be used for Bitbucket accounts with
                2-factor authentication enabled.

                ### GitHub

                When creating a GitHub repository, one of the following sets of `auth` parameters are required. If
                multiple sets are specified, they are tried in the order shown here.

                1. OAuth: `access`
                1. Personal Access Token: `token`

                ### GitLab

                When creating a GitLab repository, one of the following sets of `auth` parameters are required. If
                multiple sets are specified, they are tried in the order shown here.

                1. OAuth: `access`
                1. Personal Access Token: `token`
                1. Username/Password: `user`, `pass`

                When using username/password authentication for a GitLab repository , Tugboat **does not** store these
                values. It uses them to acquire an OAuth token from the GitLab API, then discards the provided username
                & password values.

                ### Stash/Bitbucket Server

                When creating a Stash or Bitbucket Server repository, one of the following sets of `auth`
                parameters are required. If multiple sets are specified, they are tried in the order shown here.

                1. Personal Access Token: `token`
                1. Username/Password: `user`, `pass`

                When using username/password authentication for a Stash or Bitbucket Server repository, Tugboat **DOES
                STORE THESE VALUES** due to limitations on the Stash and Bitbucket Server APIs. If this is the
                authentication method you choose, we recommend setting up a "bot" account on your Stash or Bitbucket
                Server instance for Tugboat.

            tags:
                - Repositories
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - project
                                - provider
                                - repository
                            properties:
                                project:
                                    allOf:
                                        - $ref: '#/components/schemas/ProjectId'
                                    description: The ID of the Project the new Repository belongs to
                                provider:
                                    type: object
                                    required:
                                        - name
                                    description: Information about the provider hosting the repository
                                    properties:
                                        name:
                                            allOf:
                                                - $ref: '#/components/schemas/ProviderName'
                                            description: Which provider is hosting the git repository
                                        address:
                                            type: string
                                            description: |
                                                - **GitHub** - The URL to the GitHub API. Default: https://api.github.com
                                                - **GitLab** - The URL to the GitLab instance. Default: https://gitlab.com
                                                - **Stash/Bitbucket Server (Required)** - The URL to the Bitbucket Server or Stash instance.
                                        app:
                                            type: string
                                            description: |
                                                - **GitLab** - An [OAuth Application ID](https://docs.gitlab.com/ee/integration/oauth_provider.html).
                                                Required when using username/password authentication for a GitLab instance other than https://gitlab.com
                                        secret:
                                            type: string
                                            description: |
                                                - **GitLab** - An [OAuth Application Secret](https://docs.gitlab.com/ee/integration/oauth_provider.html).
                                                Required when using username/password authentication for a GitLab instance other than https://gitlab.com
                                    example:
                                        name: github
                                repository:
                                    type: object
                                    required:
                                        - name
                                    description: Information about the provider repository
                                    properties:
                                        group:
                                            type: string
                                            description: |
                                                - **Bitbucket (Required)** - The Bitbucket repo "owner"
                                                - **GitHub (Required)** - The GitHub repo "owner"
                                                - **GitLab (Required)** - The GitLab repo "namespace"
                                                - **Stash/Bitbucket Server (Required)** - The Stash/Bitbucket Server repo "project"
                                        name:
                                            type: string
                                            description: |
                                                - **Bitbucket (Required)** - The Bitbucket repo "slug"
                                                - **Git (Required)** - The fully qualified Git repo URL
                                                - **GitHub (Required)** - The GitHub repo "repo"
                                                - **GitLab (Required)** - The GitLab repo "project"
                                                - **Stash/Bitbucket Server (Required)** - The Stash/Bitbucket Server repo "slug"
                                        port:
                                            type: string
                                            description: |
                                                - **Stash/Bitbucket Server** - The SSH port to use for git checkouts. Default: 7999
                                    example:
                                        group: TugboatQA
                                        name: demo
                                auth:
                                    type: object
                                    description: Provider authentication information
                                    properties:
                                        token: # API Token or App Password
                                            type: string
                                            description: |
                                                - **Bitbucket** - A Bitbucket application password. Must be paired with a valid `user`
                                                - **GitHub** - A Github personal access token
                                                - **GitLab** - A GitLab personal access token
                                                - **Stash/Bitbucket Server** - A Bitbucket Server personal access token
                                        access: # OAuth Access Token
                                            type: string
                                            description: |
                                                - **Bitbucket** - A Bitbucket OAuth refresh token
                                                - **GitHub** - A GitHub OAuth access token
                                                - **GitLab** - A GitLab OAuth access token
                                        user: # Username/Password/OTP: username
                                            type: string
                                            description: |
                                                - **Bitbucket** - Used for username/password authentication.
                                                - **GitLab** - Used for username/password authentication.
                                                - **Stash/Bitbucket Server** - Used for username/password authentication.
                                        pass: # Username/Password/OTP: password
                                            type: string
                                            description: |
                                                - **Bitbucket** - Used for username/password authentication.
                                                - **GitLab** - Used for username/password authentication.
                                                - **Stash/Bitbucket Server** - Used for username/password authentication.
                                    example:
                                        token: Mae5oghus4eishaeph7ohbei9che2woaDuoxohTh
                                autobuild:
                                    $ref: '#/components/schemas/Repo/properties/autobuild'
                                autobuild_drafts:
                                    $ref: '#/components/schemas/Repo/properties/autobuild_drafts'
                                autodelete:
                                    $ref: '#/components/schemas/Repo/properties/autodelete'
                                autorebuild:
                                    $ref: '#/components/schemas/Repo/properties/autorebuild'
                                autoredeploy:
                                    $ref: '#/components/schemas/Repo/properties/autoredeploy'
                                build_timeout:
                                    $ref: '#/components/schemas/Repo/properties/build_timeout'
                                domain:
                                    $ref: '#/components/schemas/Repo/properties/domain'
                                envvars:
                                    $ref: '#/components/schemas/Repo/properties/envvars'
                                ip_allow:
                                    $ref: '#/components/schemas/Repo/properties/ip_allow'
                                ip_deny:
                                    $ref: '#/components/schemas/Repo/properties/ip_deny'
                                keygen:
                                    allOf:
                                        - $ref: '#/components/schemas/SSHKey'
                                    description: Options to use when generating the SSH key pair for the Repository
                                name:
                                    $ref: '#/components/schemas/Repo/properties/name'
                                provider_comment:
                                    $ref: '#/components/schemas/Repo/properties/provider_comment'
                                provider_deployment:
                                    $ref: '#/components/schemas/Repo/properties/provider_deployment'
                                provider_forks:
                                    $ref: '#/components/schemas/Repo/properties/provider_forks'
                                provider_status:
                                    $ref: '#/components/schemas/Repo/properties/provider_status'
                                quota:
                                    $ref: '#/components/schemas/Repo/properties/quota'
                                refresh_anchors:
                                    $ref: '#/components/schemas/Repo/properties/refresh_anchors'
                                refresh_day:
                                    $ref: '#/components/schemas/Repo/properties/refresh_day'
                                refresh_hour:
                                    $ref: '#/components/schemas/Repo/properties/refresh_hour'
                                rebuild_orphaned:
                                    $ref: '#/components/schemas/Repo/properties/rebuild_orphaned'
                                rebuild_stale:
                                    $ref: '#/components/schemas/Repo/properties/rebuild_stale'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "project": "5d810c19f6f8203d5b65ef01", "provider": { "name": "git" }, "repository": { "name": "https://github.com/TugboatQA/demo.git" } }' \
                           https://api.tugboatqa.com/v3/repos
            responses:
                201:
                    description: Successfully created the Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repo'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Project
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownProjectError'

    /repos/{id}:
        get:
            summary: Get a Repository
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repo'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

        patch:
            summary: Update a Repository
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Repo'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "name": "New Repo Name" }' \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5d810c19f6f82083ed65ef03 name="New Repo Name"
            responses:
                200:
                    description: Successfully updated the Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repo'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

        delete:
            summary: Delete a Repository
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5d810c19f6f82083ed65ef03
            responses:
                204:
                    description: Successfully deleted the Repository
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/auth:
        patch:
            summary: Update Provider API Authentication
            description: |
                Updates the provider (Bitbucket / GitLab / GitHub) API authentication credentials for a Repository.

                ### Bitbucket

                When reauthenticating a Bitbucket repository, one of the following sets of `auth` parameters are
                required. If multiple sets are specified, they are tried in the order shown here.

                1. OAuth: `access`
                1. Application Password: `user`, `token`
                1. Username/Password: `user`, `pass`

                When using username/password authentication for a Bitbucket repository , Tugboat **does not** store
                these values. It uses them to acquire an OAuth token from the Bitbucket API, then discards the provided
                username & password values. Username/password authentication cannot be used for Bitbucket accounts with
                2-factor authentication enabled.

                ### GitHub

                When reauthenticating a GitHub repository, one of the following sets of `auth` parameters are required.
                If multiple sets are specified, they are tried in the order shown here.

                1. OAuth: `access`
                1. Personal Access Token: `token`

                ### GitLab

                When reauthenticating a GitLab repository, one of the following sets of `auth` parameters are required.
                If multiple sets are specified, they are tried in the order shown here.

                1. OAuth: `access`
                1. Personal Access Token: `token`
                1. Username/Password: `user`, `pass`

                When using username/password authentication for a GitLab repository , Tugboat **does not** store these
                values. It uses them to acquire an OAuth token from the GitLab API, then discards the provided username
                & password values.

                ### Stash/Bitbucket Server

                When reauthenticating a Stash or Bitbucket Server repository, one of the following sets of `auth`
                parameters are required. If multiple sets are specified, they are tried in the order shown here.

                1. Personal Access Token: `token`
                1. Username/Password: `user`, `pass`

                When using username/password authentication for a Stash or Bitbucket Server repository, Tugboat **DOES
                STORE THESE VALUES** due to limitations on the Stash and Bitbucket Server APIs. If this is the
                authentication method you choose, we recommend setting up a "bot" account on your Stash or Bitbucket
                Server instance for Tugboat.

            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - auth
                            properties:
                                auth:
                                    type: object
                                    description: Provider authentication information
                                    properties:
                                        token: # API Token or App Password
                                            type: string
                                            description: |
                                                - **Bitbucket** - A Bitbucket application password. Must be paired with a valid `user`
                                                - **GitHub** - A Github personal access token
                                                - **GitLab** - A GitLab personal access token
                                                - **Stash/Bitbucket Server** - A Bitbucket Server personal access token
                                        access: # OAuth Access Token
                                            type: string
                                            description: |
                                                - **Bitbucket** - A Bitbucket OAuth refresh token
                                                - **GitHub** - A GitHub OAuth access token
                                                - **GitLab** - A GitLab OAuth access token
                                        user: # Username/Password/OTP: username
                                            type: string
                                            description: |
                                                - **Bitbucket** - Used for username/password authentication.
                                                - **GitLab** - Used for username/password authentication.
                                                - **Stash/Bitbucket Server** - Used for username/password authentication.
                                        pass: # Username/Password/OTP: password
                                            type: string
                                            description: |
                                                - **Bitbucket** - Used for username/password authentication.
                                                - **GitLab** - Used for username/password authentication.
                                                - **Stash/Bitbucket Server** - Used for username/password authentication.
                                    example:
                                        token: Mae5oghus4eishaeph7ohbei9che2woaDuoxohTh
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "auth": { "token": "Mae5oghus4eishaeph7ohbei9che2woaDuoxohTh" } }' \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/auth
            responses:
                200:
                    description: Successfully updated the Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repo'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/previews:
        get:
            summary: Get Repository Previews
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/previews
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list previews repo=5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Preview'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/branches:
        get:
            summary: Get Repository Branches
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/branches
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list branches 5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/RepoBranch'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/tags:
        get:
            summary: Get Repository Tags
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/tags
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list tags 5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/RepoTag'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/pulls:
        get:
            summary: Get Repository Pull Requests
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/pulls
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list pulls 5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/RepoPullRequest'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/jobs:
        get:
            summary: Get Repository Jobs
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
                - name: action
                  in: query
                  description: Filter Jobs by action
                  schema:
                      type: array
                      items:
                          type: string
                          enum: [keygen, update]
                      default: [keygen, update]
                - name: limit
                  in: query
                  description: Return this many of the most recent results
                  schema:
                      type: integer
                - name: children
                  in: query
                  description:
                      Return jobs for the Previews and Services that belong to the Repository as well as the Project
                      Jobs
                  schema:
                      type: boolean
                      default: false
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/jobs
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list jobs 5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/RepoJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/registries:
        get:
            summary: Get Repository Docker Registries
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/registries
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list registries repo=5d810c19f6f82083ed65ef03
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Registry'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/statistics/{item}:
        get:
            summary: Get Repository Statistics
            description: |
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
                - name: item
                  in: path
                  required: true
                  description: The requested type of data
                  schema:
                      type: string
                      enum:
                          - build-time
                          - refresh-time
                          - size
                          - previews
                          - services
                - name: limit
                  in: query
                  description: Return this many of the most recent results, applied after any other filters
                  schema:
                      type: integer
                      default: 20
                - name: before
                  in: query
                  description: Only return results that were gathered at or before this date/time
                  schema:
                      type: string
                      format: date-time
                - name: after
                  in: query
                  description: Only return results that were gathered at or after this date/time
                  schema:
                      type: string
                      format: date-time
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/statistics/size
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Statistics'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /repos/{id}/keygen:
        post:
            summary: Create new SSH Key
            description: Generates a new SSH keypair for the Repository, and replaces the existing keypair.
            tags:
                - Repositories
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Repository
                  schema:
                      $ref: '#/components/schemas/RepoId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SSHKey'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "type": "rsa", "bits": 4096 }' \
                           https://api.tugboatqa.com/v3/repos/5d810c19f6f82083ed65ef03/keygen
            responses:
                200:
                    description: Successfully updated the Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repo'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    ### Previews

    /previews:
        post:
            summary: Create a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - ref
                                - repo
                            properties:
                                ref:
                                    type: string
                                    description:
                                        The git ref to build the Preview for. This can be a pull request number, branch,
                                        tag, or commit hash
                                    example: 1234
                                repo:
                                    allOf:
                                        - $ref: '#/components/schemas/RepoId'
                                    description: The ID of the Repository to create the Preview in
                                anchor:
                                    description:
                                        Whether the Preview is used as a default Base Preview for the Repository
                                    type: boolean
                                    default: false
                                anchor_type:
                                    type: string
                                    enum: [repo, branch]
                                    default: repo
                                    description: |
                                        When `anchor` is `true`, this defines how the preview is used as a default Base
                                        Preview

                                        - `repo` - Automatically use this Preview as a Base Preview for all new Previews
                                        built for the Repository

                                        - `branch` - Automatically use this Preview as a Base Preview for new pull
                                        request Previews that merge into the branch used to create this Preview. This
                                        anchor type can only be set on branch Previews
                                base:
                                    type: string
                                    default: default
                                    description: |
                                        Defines which Preview(s) to use as a Base Preview for the Preview being created.

                                        - `default` or not specified - Use matching `branch` and `repo` anchored Base
                                        Previews in the Repository. If there are multiple matching anchored Base
                                        Previews, multiple Previews are created. One for each Base Preview. If there are
                                        no matching Base Previews, the Preview is built with no Base Preview.

                                        - `none` or boolean `false` - Do not use a Base Preview, even if there are
                                        matching anchored Base Previews in the Repository.

                                        - `branch` - For pull request Previews, use `branch` anchored Base Previews
                                        in the Repository that were built from the branch that the pull request wants to
                                        merge into. If there are multiple matching anchored Base Previews, multiple
                                        Previews are created. One for each Base Preview. If there are no matching Base
                                        Previews, the Preview is built with no Base Preview. For other Preview types,
                                        this is equivalent to specifying `none`.

                                        - `repo` - Use `repo` anchored Base Previews in the Repository. If there are
                                        multiple matching anchored Base Previews, multiple Previews are created. One for
                                        each Base Preview. If there are no matching Base Previews, the Preview is built
                                        with no Base Preview.

                                        - `auto` - For pull request Previews, look for **any** preview built from the
                                        branch that the pull request wants to merge into. If found, use the most
                                        recently built as the Base Preview. This option ignores anchored Base Previews.
                                        For other Preview types, this is equivalent to specifying `none`.

                                        - A Preview ID - Use a specific Preview as a Base Preview. Any Preview in the
                                        same Repository can be used as a Base Preview
                                config:
                                    $ref: '#/components/schemas/Preview/properties/config'
                                expires:
                                    type: string
                                    format: date-time
                                    description: If set, the Preview will automatically be deleted at this time
                                    example: 2019-10-07T18:30:18.664Z
                                name:
                                    type: string
                                    description:
                                        A human-readable label for the Preview. If not specified, the `ref` is used
                                type:
                                    type: string
                                    description: |
                                        The type of Preview to create. If not specified, Tugboat attempts to guess the
                                        type by searching for a ref that matches the provided preview name in the
                                        following order. The first matching ref is used for the preview.

                                        1. Pull Request (or Merge Request) number
                                        1. Commit Hash
                                        1. Tag Name
                                        1. Branch Name
                                    enum: [pullrequest, mergerequest, branch, tag, commit]
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST \
                           -d '{ "repo": "5d810c19f6f82083ed65ef03", "ref": "1234", "type": "pullrequest" }' \
                           https://api.tugboatqa.com/v3/previews
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat create preview 1234 type=pullrequest repo=5d810c19f6f82083ed65ef03
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'

    /previews/{id}:
        get:
            summary: Get a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
                - URL Token: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b842252163ca8a1508c11
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Preview'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

        patch:
            summary: Update a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Preview'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "locked": true, "anchor": false }' \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5d9b842252163ca8a1508c11 locked=true anchor=false
            responses:
                200:
                    description: Successfully updated the Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Preview'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

        delete:
            summary: Delete a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                force:
                                    type: boolean
                                    default: false
                                    description:
                                        When set to `true`, the preview will be deleted even if it is in an invalid
                                        state to be deleted under normal circumstances. This must be set to `true` in
                                        order to delete a base preview. A locked preview cannot be deleted, even by
                                        setting this to `true`
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X DELETE \
                           -d '{ "force": true }' \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete -f 5d9b842252163ca8a1508c11
            responses:
                204:
                    description: Successfully deleted the Preview
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeletePreviewError'

    /previews/{id}/log:
        get:
            summary: Get Preview Log
            description: Returns the Preview's most recent build log
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
                - name: level
                  in: query
                  description: Filter the log by loglevel
                  schema:
                      type: string
                      enum: [info, stdin, stdout, stderr]
                      default: [info, stdin, stdout, stderr]
                - name: limit
                  in: query
                  description: Only return this many most recent log entries
                  schema:
                      type: integer
                      default: 0
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/log
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat log 5d9b842252163ca8a1508c11
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Log'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/mail:
        get:
            summary: Get Preview Mail
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/mail
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list mail preview=5d9b842252163ca8a1508c11
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Message'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/services:
        get:
            summary: Get Preview Services
            description: |
            tags:
                - Previews
            security:
                - API Key: []
                - URL Token: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/services
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list services preview=5d9b842252163ca8a1508c11
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Service'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/jobs:
        get:
            summary: Get Preview Jobs
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
                - name: action
                  in: query
                  description: Filter Jobs by action
                  schema:
                      type: array
                      items:
                          type: string
                          enum: [build, clone, rebuild, refresh, rekey, reset, start, stop, suspend, update]
                      default: [build, clone, rebuild, refresh, rekey, reset, start, stop, suspend, update]
                - name: limit
                  in: query
                  description: Return this many of the most recent results
                  schema:
                      type: integer
                - name: children
                  in: query
                  description: Return jobs for the Services that belong to the Preview as well as the Preview Jobs
                  schema:
                      type: boolean
                      default: false
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/jobs
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list jobs 5d9b842252163ca8a1508c11
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/statistics/{item}:
        get:
            summary: Get Preview Statistics
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
                - name: item
                  in: path
                  required: true
                  description: The requested type of data
                  schema:
                      type: string
                      enum:
                          - build-time
                          - refresh-time
                          - size
                          - services
                - name: limit
                  in: query
                  description: Return this many of the most recent results, applied after any other filters
                  schema:
                      type: integer
                      default: 20
                - name: before
                  in: query
                  description: Only return results that were gathered at or before this date/time
                  schema:
                      type: string
                      format: date-time
                - name: after
                  in: query
                  description: Only return results that were gathered at or after this date/time
                  schema:
                      type: string
                      format: date-time
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/statistics/size
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Statistics'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/clone:
        post:
            summary: Clone a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description:
                                        A human-readable label to give the new Preview. If not specified, the new
                                        Preview will be given the same label as the Preview it was cloned from
                                expires:
                                    $ref: '#/components/schemas/Preview/properties/expires'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "name": "Cloned Preview" }' \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/clone
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat clone 5d9b842252163ca8a1508c11 name="Cloned Preview"
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/rebuild:
        post:
            summary: Rebuild a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                children:
                                    type: boolean
                                    default: false
                                    description: Whether to rebuild any child Previews when done rebuilding
                                force:
                                    type: boolean
                                    default: false
                                    description: Force the Preview to rebuild if it is a Base Preview to other Previews
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "children": true }' \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/rebuild
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat rebuild 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RebuildPreviewError'

    /previews/{id}/redeploy:
        post:
            summary: Redeploy a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                children:
                                    type: boolean
                                    default: false
                                    description: Whether to rebuild any child Previews when done redeploying
                                force:
                                    type: boolean
                                    default: false
                                    description: Force the Preview to redeploy if it is a Base Preview to other Previews
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "children": true }' \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/redeploy
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat redeploy 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RedeployPreviewError'

    /previews/{id}/refresh:
        post:
            summary: Refresh a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                children:
                                    type: boolean
                                    default: false
                                    description: Whether to rebuild any child Previews when done refreshing
                                force:
                                    type: boolean
                                    default: false
                                    description:
                                        Force the Preview to refresh even if it is a state that would otherwise prevent
                                        refreshing
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "children": true }' \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/refresh
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat refresh 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/rekey:
        post:
            summary: Rekey a Preview
            description:
                Every Service in a Tugboat Preview is given a unique token which is used to generate the URL for that
                service. Rekeying a Preview regenerates these tokens, effectively disabling any existing links to the
                Services in the Preview.
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X POST \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/rekey
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat rekey 5d9b842252163ca8a1508c11
            responses:
                200:
                    description: Successfully rekeyed the Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Preview'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/reset:
        post:
            summary: Reset a Preview
            description:
                Resets a Preview back to the state it was in immediately following its most recent build, rebuild, or
                refresh
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X POST \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/reset
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat reset 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/start:
        post:
            summary: Start a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X POST \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/start
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat start 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/stop:
        post:
            summary: Stop a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X POST \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/stop
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat stop 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    /previews/{id}/suspend:
        post:
            summary: Suspend a Preview
            description: |
            tags:
                - Previews
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Preview
                  schema:
                      $ref: '#/components/schemas/PreviewId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X POST \
                           https://api.tugboatqa.com/v3/previews/5d9b842252163ca8a1508c11/suspend
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat suspend 5d9b842252163ca8a1508c11
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Preview
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownPreviewError'

    ### Services

    /services/{id}:
        get:
            summary: Get a Service
            description: |
            tags:
                - Services
            security:
                - API Key: []
                - URL Token: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /services/{id}/lighthouse:
        get:
            summary: Get Service Lighthouse Reports
            description: |
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/lighthouse
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list lighthouse service=5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/LighthouseReport'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportsUnavailableError'

    /services/{id}/log:
        get:
            summary: Get Service Log
            description: Returns the Service's most recent build log
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
                - name: level
                  in: query
                  description: Filter the log by loglevel
                  schema:
                      type: string
                      enum: [info, stdin, stdout, stderr]
                      default: [info, stdin, stdout, stderr]
                - name: limit
                  in: query
                  description: Only return this many most recent log entries
                  schema:
                      type: integer
                      default: 0
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/log
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat log 5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Log'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /services/{id}/output:
        get:
            summary: Get Service Output
            description: |
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/output
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat output 5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/ServiceOutput'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /services/{id}/screenshots:
        get:
            summary: Get Service Screenshots
            description: |
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/screenshots
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list screenshots service=5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Screenshot'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /services/{id}/jobs:
        get:
            summary: Get Service Jobs
            description: |
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
                - name: limit
                  in: query
                  description: Return this many of the most recent results
                  schema:
                      type: integer
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/jobs
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list jobs 5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/ServiceJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /services/{id}/statistics/{item}:
        get:
            summary: Get Service Statistics
            description: |
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
                - name: item
                  in: path
                  required: true
                  description: The requested type of data
                  schema:
                      type: string
                      enum:
                          - size
                - name: limit
                  in: query
                  description: Return this many of the most recent results, applied after any other filters
                  schema:
                      type: integer
                      default: 20
                - name: before
                  in: query
                  description: Only return results that were gathered at or before this date/time
                  schema:
                      type: string
                      format: date-time
                - name: after
                  in: query
                  description: Only return results that were gathered at or after this date/time
                  schema:
                      type: string
                      format: date-time
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/statistics/size
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Statistics'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /service/{id}/reset:
        post:
            summary: Reset a Service
            description:
                Resets a Service back to the state it was in immmediately following its Preview's most recent build,
                rebuild, or refresh
            tags:
                - Services
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X POST \
                           https://api.tugboatqa.com/v3/services/5d9b842352163cc294508c15/reset
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat reset 5d9b842352163cc294508c15
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServiceJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    ### Screenshots

    /screenshots:
        post:
            summary: Create a Screenshot
            description: |
            tags:
                - Screenshots
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - service
                            properties:
                                service:
                                    allOf:
                                        - $ref: '#/components/schemas/ServiceId'
                                    description: The ID of the Service to create a Screenshot of
                                url:
                                    description: The relative URL to create a Screenshot of
                                    oneOf:
                                        - type: string
                                          format: url
                                        - type: array
                                          items:
                                              type: string
                                              format: url
                                    default: /
                                screen:
                                    description: The screen to emulate for the Screenshot
                                    oneOf:
                                        - type: string
                                          enum: [desktop, tablet, mobile, pdf]
                                        - type: array
                                          items:
                                              type: string
                                              enum: [desktop, tablet, mobile, pdf]
                                    default: desktop
                                alias:
                                    description: Service aliases to use for the Screenshot
                                    oneOf:
                                        - type: string
                                        - type: array
                                          items:
                                              type: string
                                fullPage:
                                    $ref: '#/components/schemas/Screenshot/properties/fullPage'
                                timeout:
                                    $ref: '#/components/schemas/Screenshot/properties/timeout'
                                waitUntil:
                                    $ref: '#/components/schemas/Screenshot/properties/waitUntil'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST \
                           -d '{ "service": "5d810c19f6f82083ed65ef03", "url": "/", "screen": ["mobile", "desktop"] }' \
                           https://api.tugboatqa.com/v3/screenshots
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat create screenshot service=5d810c19f6f82083ed65ef03 url=/ screen=mobile,desktop
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'

    /screenshots/{id}:
        get:
            summary: Get a Screenshot
            description: |
            tags:
                - Screenshots
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Screenshot
                  schema:
                      $ref: '#/components/schemas/ScreenshotId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/screenshots/5d9b94b5ca88fe9a6566ab87
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b94b5ca88fe9a6566ab87
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Screenshot'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Screenshot
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownScreenshotError'

        delete:
            summary: Delete a Screenshot
            description: |
            tags:
                - Screenshots
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Screenshot
                  schema:
                      $ref: '#/components/schemas/ScreenshotId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/screenshots/5f15a2322606f0f13aeb1a1d
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5f15a2322606f0f13aeb1a1d
            responses:
                204:
                    description: Successfully deleted the Screenshot
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Screenshot
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownScreenshotError'

    /screenshots/{id}/image:
        get:
            summary: Get a Screenshot Image
            description: |
            tags:
                - Screenshots
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Screenshot
                  schema:
                      $ref: '#/components/schemas/ScreenshotId'
                - name: Accept
                  in: header
                  description: |
                      By default, the Screenshot image will be returned as a binary using an appropriate `Content-Type`
                      header for its native format (`image/png` or `application/pdf`). To request the image data wrapped
                      in a JSON object, include an `Accept: application/json` header in the request
                  schema:
                      type: string
                      enum: [application/json]
                - name: crop
                  in: query
                  description: Whether to crop the Screenshot image height to be square with its height
                  schema:
                      type: boolean
                      default: false
                - name: scale
                  in: query
                  description:
                      Request the Screenshot scaled to a specific width in pixels. Combine with `crop=true` to get a
                      square thumbnail image.
                  schema:
                      type: integer
                      enum: [10, 120, 200, 250, 320, 500, 768, 1000]
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           "https://api.tugboatqa.com/v3/screenshots/5d9b94b5ca88fe9a6566ab87/image?crop=true&scale=200"
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b94b5ca88fe9a6566ab87 crop scale=200
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ScreenshotData'
                        application/pdf:
                            schema:
                                type: string
                                format: binary
                        image/png:
                            schema:
                                type: string
                                format: binary
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Screenshot
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownScreenshotError'

    /screenshots/{id}/visualdiffs:
        get:
            summary: Get Screenshot Visual Diffs
            description: |
            tags:
                - Screenshots
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Screenshot
                  schema:
                      $ref: '#/components/schemas/ScreenshotId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/screenshots/5d9b94b5ca88fe9a6566ab87/visualdiffs
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list visualdiffs screenshot=5d9b94b5ca88fe9a6566ab87
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Screenshot'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Screenshot
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownScreenshotError'

    /screenshots/{id}/rebuild:
        post:
            summary: Rebuild a Screenshot
            description: |
            tags:
                - Screenshots
            security:
                - API Keys: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Screenshot
                  schema:
                      $ref: '#/components/schemas/ScreenshotId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                fullPage:
                                    $ref: '#/components/schemas/Screenshot/properties/fullPage'
                                timeout:
                                    $ref: '#/components/schemas/Screenshot/properties/timeout'
                                waitUntil:
                                    $ref: '#/components/schemas/Screenshot/properties/waitUntil'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "timeout": 45 }' \
                           https://api.tugboatqa.com/v3/screenshots/5f15a2322606f0f13aeb1a1d/rebuild
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat rebuild 5f15a2322606f0f13aeb1a1d
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ScreenshotJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Screenshot
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownScreenshotError'

    ### Visual Diffs

    /visualdiffs:
        post:
            summary: Create a Visual Diff
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - base
                                - screenshot
                            properties:
                                screenshot:
                                    allOf:
                                        - $ref: '#/components/schemas/ScreenshotId'
                                    description: The ID of the Screenshot to create a Visual Diff of
                                base:
                                    allOf:
                                        - $ref: '#/components/schemas/ScreenshotId'
                                    description: The ID of the Screenshot to compare
                                threshold:
                                    allOf:
                                        - $ref: '#/components/schemas/VisualDiff/properties/threshold'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST \
                           -d '{ "screenshot": "5d9b94b5ca88fe9a6566ab87", "base": "5d9b842352163cc294508c15" }' \
                           https://api.tugboatqa.com/v3/visualdiffs
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat create visualdiff screenshot=5d9b94b5ca88fe9a6566ab87 base=5d9b842352163cc294508c15
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Screenshot or Service
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: '#/components/schemas/UnknownScreenshotError'
                                    - $ref: '#/components/schemas/UnknownServiceError'

    /visualdiffs/{id}:
        get:
            summary: Get a Visual Diff
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b94baca88fe9a6566ac2f
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VisualDiff'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

        patch:
            summary: Update a Visual Diff
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VisualDiff'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "threshold": 10, "approved": true }' \
                           https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5d9b94baca88fe9a6566ac2f threshold=10 approved=true
            responses:
                200:
                    description: Successfully updated the Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VisualDiff'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

        delete:
            summary: Delete a Visual Diff
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5d9b94baca88fe9a6566ac2f
            responses:
                204:
                    description: Successfully deleted the Visual Diff
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

    /visualdiffs/{id}/before:
        get:
            summary: Get a Visual Diff "before" Image
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
                - name: Accept
                  in: header
                  description: |
                      By default, the Visual Diff "before" image will be returned as a binary with a `Content-Type:
                      image/png` header. To request the image data wrapped in a JSON object, include an `Accept:
                      application/json` header in the request.
                - name: crop
                  in: query
                  description: Whether to crop the image height to be square with its height
                  schema:
                      type: boolean
                      default: false
                - name: scale
                  in: query
                  description:
                      Request the image scaled to a specific width. Combine with `crop=true` to get a square thumbnail
                      image
                  schema:
                      type: integer
                      enum: [10, 120, 200, 250, 320, 500, 768, 1000]
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           "https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f/before?crop=true&scale=200"
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b94baca88fe9a6566ac2f crop scale=200
            responses:
                200:
                    description: Success
                    content:
                        image/png:
                            schema:
                                type: string
                                format: binary
                        application/json:
                            schema:
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            before:
                                                $ref: '#/components/schemas/VisualDiffBefore'
                                allOf:
                                    - $ref: '#/components/schemas/VisualDiff'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

    /visualdiffs/{id}/after:
        get:
            summary: Get a Visual Diff "after" Image
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
                - name: Accept
                  in: header
                  description: |
                      By default, the Visual Diff "after" image will be returned as a binary with a `Content-Type:
                      image/png` header. To request the image data wrapped in a JSON object, include an `Accept:
                      application/json` header in the request.
                - name: crop
                  in: query
                  description: Whether to crop the image height to be square with its height
                  schema:
                      type: boolean
                      default: false
                - name: scale
                  in: query
                  description:
                      Request the image scaled to a specific width. Combine with `crop=true` to get a square thumbnail
                      image
                  schema:
                      type: integer
                      enum: [10, 120, 200, 250, 320, 500, 768, 1000]
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           "https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f/after?crop=true&scale=200"
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b94baca88fe9a6566ac2f crop scale=200
            responses:
                200:
                    description: Success
                    content:
                        image/png:
                            schema:
                                type: string
                                format: binary
                        application/json:
                            schema:
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            after:
                                                $ref: '#/components/schemas/VisualDiffAfter'
                                allOf:
                                    - $ref: '#/components/schemas/VisualDiff'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

    /visualdiffs/{id}/diff:
        get:
            summary: Get a Visual Diff "diff" Image
            description: |
            tags:
                - Visual Diffs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
                - name: Accept
                  in: header
                  description: |
                      By default, the Visual Diff "diff" image will be returned as a binary with a `Content-Type:
                      image/png` header. To request the image data wrapped in a JSON object, include an `Accept:
                      application/json` header in the request.
                - name: crop
                  in: query
                  description: Whether to crop the image height to be square with its height
                  schema:
                      type: boolean
                      default: false
                - name: scale
                  in: query
                  description:
                      Request the image scaled to a specific width. Combine with `crop=true` to get a square thumbnail
                      image
                  schema:
                      type: integer
                      enum: [10, 120, 200, 250, 320, 500, 768, 1000]
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           "https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f/diff?crop=true&scale=200"
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b94baca88fe9a6566ac2f crop scale=200
            responses:
                200:
                    description: Success
                    content:
                        image/png:
                            schema:
                                type: string
                                format: binary
                        application/json:
                            schema:
                                properties:
                                    data:
                                        type: object
                                        properties:
                                            diff:
                                                $ref: '#/components/schemas/VisualDiffDiff'
                                allOf:
                                    - $ref: '#/components/schemas/VisualDiff'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

    /visualdiffs/{id}/rebuild:
        post:
            summary: Rebuild a Visual Diff
            description: |
            tags:
                - Visual Diffs
            security:
                - API Keys: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Visual Diff
                  schema:
                      $ref: '#/components/schemas/VisualDiffId'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                before:
                                    type: boolean
                                    default: false
                                    description:
                                        Force the "before" screenshot to be re-rendered before rebuilding the Visual
                                        Diff. If the service for this screenshot no longer exists, the cached image from
                                        the original comparison will be reused.
                                after:
                                    type: boolean
                                    default: false
                                    description:
                                        Force the "after" screenshot to be re-rendered before rebuilding the Visual Diff
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "after": true }' \
                           https://api.tugboatqa.com/v3/visualdiffs/5d9b94baca88fe9a6566ac2f/rebuild
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat rebuild 5d9b94baca88fe9a6566ac2f after
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VisualDiffJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Visual Diff
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownVisualDiffError'

    ### Lighthouse Reports

    /lighthouse:
        post:
            summary: Create a Report
            description: |
            tags:
                - Lighthouse Reports
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - service
                            properties:
                                service:
                                    description: The ID of the Service to create a Lighthouse Report for
                                    allOf:
                                        - $ref: '#/components/schemas/ServiceId'
                                url:
                                    description: The relative URL to create a Lighthouse Report for
                                    oneOf:
                                        - type: string
                                          format: url
                                        - type: array
                                          items:
                                              type: string
                                              format: url
                                    default: /
                                screen:
                                    description: The screen to emulate for the Lighthouse Report
                                    oneOf:
                                        - type: string
                                          enum: [desktop, mobile]
                                        - type: array
                                          items:
                                              type: string
                                              enum: [desktop, mobile]
                                    default: desktop
                                alias:
                                    description: Service aliases to use for the Lighthouse Report
                                    oneOf:
                                        - type: string
                                        - type: array
                                          items:
                                              type: string
                                config:
                                    description:
                                        A custom Lighthouse config to use for the Report.
                                        https://github.com/GoogleChrome/lighthouse/blob/master/docs/configuration.md
                                    type: object
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST \
                           -d '{ "service": "5d810c19f6f82083ed65ef03", "url": "/", "screen": ["mobile", "desktop"] }' \
                           https://api.tugboatqa.com/v3/lighthouse
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat create lighthouse service=5d810c19f6f82083ed65ef03 url=/ screen=mobile,desktop
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        applicaiton/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Service
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownServiceError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportsUnavailableError'

    /lighthouse/{id}:
        get:
            summary: Get a Report
            description: |
            tags:
                - Lighthouse Reports
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: the ID of the Lighthouse Report
                  schema:
                      $ref: '#/components/schemas/LighthouseReport'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/lighthouse/5f15a2322606f0f13aeb1a1d
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5f15a2322606f0f13aeb1a1d
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReport'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Lighthouse Report
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownLighthouseReportError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportsUnavailableError'

        delete:
            summary: Delete a Report
            description: |
            tags:
                - Lighthouse Reports
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  description: The ID of the Lighthouse Report
                  schema:
                      $ref: '#/components/schemas/LighthouseReportId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/lighthouse/5f15a2322606f0f13aeb1a1d
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5f15a2322606f0f13aeb1a1d
            responses:
                204:
                    description: Successfully deleted the Lighthouse Report
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Lighthouse Report
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownLighthouseReportError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportsUnavailableError'

    /lighthouse/{id}/html:
        get:
            summary: Get HTML Report
            description: Returns a full Lighthouse Report in HTML format.
            tags:
                - Lighthouse Reports
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Lighthouse Report
                  schema:
                      $ref: '#/components/schemas/LighthouseReportId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/lighthouse/5f15a2322606f0f13aeb1a1d/html
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5f15a2322606f0f13aeb1a1d html
            responses:
                200:
                    description: Success
                    content:
                        text/html:
                            schema:
                                type: string
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Lighthouse Report
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownLighthouseReportError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportsUnavailableError'

    /lighthouse/{id}/json:
        get:
            summary: Get JSON Report
            description: Returns a full Lightlouse Report in JSON format.
            tags:
                - Lighthouse Reports
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Lighthouse Report
                  schema:
                      $ref: '#/components/schemas/LighthouseReportId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/lighthouse/5f15a2322606f0f13aeb1a1d/json
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5f15a2322606f0f13aeb1a1d json
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Lighthouse Report
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownLighthouseReportError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportsUnavailableError'

    /lighthouse/{id}/rebuild:
        post:
            summary: Rebuild a Report
            description: |
            tags:
                - Lighthouse Reports
            security:
                - API Keys: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Lighthouse Report
                  schema:
                      $ref: '#/components/schemas/LighthouseReport'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                config:
                                    description:
                                        A custom Lighthouse config to use for the Report.
                                        https://github.com/GoogleChrome/lighthouse/blob/master/docs/configuration.md
                                    type: object
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST -d '{ "config": { ... } }' \
                           https://api.tugboatqa.com/v3/lighthouse/5f15a2322606f0f13aeb1a1d/rebuild
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat rebuild 5f15a2322606f0f13aeb1a1d
            responses:
                202:
                    description: Accepted
                    headers:
                        Content-Location:
                            description: Visit this URL to check the status of the job
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LighthouseReportJob'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Lighthouse Report
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownLighthouseReportError'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: '#/components/schemas/LighthouseReportsUnavailableError'
                                    - $ref: '#/components/schemas/RebuildLighthouseReportError'

    ### Mail

    /mail/{id}:
        get:
            summary: Get a Mail Message
            description: |
            tags:
                - Mail
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Mail Message
                  schema:
                      $ref: '#/components/schemas/MessageId'
                - name: Accept
                  in: header
                  description: |
                      By default, the mail message will be returned as a JSON object. To request an EML file instead,
                      include an `Accept: message/rfc822` header in the request
                  schema:
                      type: string
                      default: application/json
                      enum:
                          - application/json
                          - message/rfc822
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Accept: application/json" \
                           https://api.tugboatqa.com/v3/mail/5d9b9b5b52163ca82d508c74
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b9b5b52163ca82d508c74
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                        message/rfc822:
                            schema:
                                type: string
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                404:
                    description: Unknown Mail Message
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownMessageError'

        patch:
            summary: Update a Mail Message
            description: |
            tags:
                - Mail
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  description: The ID of the Mail Message
                  schema:
                      $ref: '#/components/schemas/MessageId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Message'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "read": true }' \
                           https://api.tugboatqa.com/v3/mail/5d9b842d52163c3f95508c26
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5d9b842d52163c3f95508c26 read
            responses:
                200:
                    description: Successfully updated the Mail Message
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Mail Message
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownMessageError'

        delete:
            summary: Delete a Mail Message
            description: |
            tags:
                - Mail
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  description: The ID of the Mail Message
                  schema:
                      $ref: '#/components/schemas/MessageId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/mail/5d9b842d52163c3f95508c26
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5d9b842d52163c3f95508c26
            responses:
                204:
                    description: Successfully deleted the Mail Message
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Mail Message
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownMessageError'

    ### Registries

    /registries:
        post:
            summary: Create a Registry
            description: |
            tags:
                - Docker Registries
            security:
                - API Key: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - repo
                                - username
                                - password
                            properties:
                                email:
                                    allOf:
                                        - $ref: '#/components/schemas/Registry/properties/email'
                                password:
                                    allOf:
                                        - $ref: '#/components/schemas/Registry/properties/password'
                                username:
                                    allOf:
                                        - $ref: '#/components/schemas/Registry/properties/username'
                                serveraddress:
                                    allOf:
                                        - $ref: '#/components/schemas/Registry/properties/serveraddress'
                                repo:
                                    allOf:
                                        - $ref: '#/components/schemas/Registry/properties/repo'
                                    readOnly: false
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X POST \
                           -d '{ "repo": "5d810c19f6f82083ed65ef03", "username": "foo", "password": "bar" }' \
                           https://api.tugboatqa.com/v3/registries
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat create registry 5d810c19f6f82083ed65ef03 username=foo password=bar
            responses:
                201:
                    description: Successfully created the Docker Registry
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Registry'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Repository
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRepoError'

    /registries/{id}:
        get:
            summary: Get a Registry
            description: |
            tags:
                - Docker Registries
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Registry
                  schema:
                      $ref: '#/components/schemas/RegistryId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/registries/5fd999343cfaf81e7f3f2bbd
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5fd999343cfaf81e7f3f2bbd
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Registry'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Registry
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRegistryError'

        patch:
            summary: Update a Registry
            description: |
            tags:
                - Docker Registries
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Registry
                  schema:
                      $ref: '#/components/schemas/RegistryId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Registry'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -H "Content-Type: application/json" \
                           -X PATCH -d '{ "password": "new-password" }' \
                           https://api.tugboatqa.com/v3/repos/5fd999343cfaf81e7f3f2bbd
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat update 5fd999343cfaf81e7f3f2bbd password=new-password
            responses:
                200:
                    description: Successfully updated the Registry
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Registry'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Registry
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRegistryError'

        delete:
            summary: Delete a Registry
            description: |
            tags:
                - Docker Registries
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Registry
                  schema:
                      $ref: '#/components/schemas/RegistryId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/repos/5fd999343cfaf81e7f3f2bbd
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat delete 5fd999343cfaf81e7f3f2bbd
            responses:
                204:
                    description: Successfully deleted the Registry
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Registry
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownRegistryError'

    ### Jobs

    /jobs/{id}:
        get:
            summary: Get a Job
            dscription: |
            tags:
                - Jobs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Job
                  $schema:
                      $ref: '#/components/schemas/JobId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           https://api.tugboatqa.com/v3/jobs/5d9e0a3f7f02ad896974a975
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat list 5d9b842352163cc294508c15
            responses:
                200:
                    description: Success
                    headers:
                        Retry-After:
                            description: The job has not finished. Check back in this many seconds
                            schema:
                                type: integer
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                303:
                    description: See Other
                    headers:
                        Location:
                            description: The job has finished. this URL is for the object that the job was for
                            schema:
                                type: string
                                format: url
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Job
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownJobError'

        delete:
            summary: Cancel a Job
            description:
                Cancels a running `clone`, `build`, `rebuild`, or `refresh` job. Other job types cannot be cancelled.
            tags:
                - Jobs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Job
                  $schema:
                      $ref: '#/components/schemas/JobId'
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           -X DELETE \
                           https://api.tugboatqa.com/v3/jobs/5d9e0a3f7f02ad896974a975
            responses:
                200:
                    description: Successfully cancelled the Job
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InvalidJobTypeError'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Job
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownJobError'
                405:
                    description: Method Not Allowed
                    headers:
                        Allow:
                            description: Allowed HTTP methods
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JobNotRunningError'

    /jobs/{id}/log:
        get:
            summary: Get Job Log
            description: |
            tags:
                - Jobs
            security:
                - API Key: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: The ID of the Job
                  $schema:
                      $ref: '#/components/schemas/JobId'
                - name: service
                  in: query
                  description: Filter the log by service
                  schema:
                      $ref: '#/components/schemas/ServiceId'
                - name: level
                  in: query
                  description: Filter the log by loglevel
                  schema:
                      type: array
                      items:
                          type: string
                          enum: [info, stdin, stdout, stderr]
                          default: [info, stdin, stdout, stderr]
                - name: limit
                  in: query
                  description: Only return this many most recent log entries for the job
                  schema:
                      type: integer
                      default: 0
            x-code-samples:
                - lang: Shell
                  source: |
                      curl -H "Authorization: Bearer $APIKEY" \
                           "https://api.tugboatqa.com/v3/jobs/5d9e0a3f7f02ad896974a975/log?limit=25"
                - lang: Shell
                  label: Tugboat CLI
                  source: |
                      tugboat log 5d9b842352163cc294508c15 limit=25
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Log'
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                403:
                    description: Permission Denied
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PermissionDeniedError'
                404:
                    description: Unknown Job
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnknownJobError'

    ### Miscellaneous

components:
    securitySchemes:
        API Key:
            type: http
            scheme: Bearer
            description: |
                API Keys can be generated at https://dashboard.tugboatqa.com/access-tokens

                All API Key requests must be made over HTTPS (port 443). A `400 Bad Request` is returned for any API
                request made over HTTP (port 80). In addition, the API Key used in that request is invalidated, and can
                no longer be used to access the Tugboat API. It was just sent over the internet in plain text, and can
                no longer be trusted.

                API Key Authentication is performed by including the API Key as a Bearer token in an `Authorization`
                request header.

                ```sh
                curl -H "Authorization: Bearer $APIKEY" https://api.tugboatqa.com
                ```

        URL Token:
            type: http
            scheme: Token
            description: |
                Every Preview and Service URL contains a Token that can be used as authentication for read-only access
                to some resources.

                <pre style="color:#000;background-color:#fff">
                https://main-kwgzbg89eakqnfcerhmbftkv5twzp7ht.tugboatqa.com/
                             └─────────── token ────────────┘

                https://preview.tugboatqa.com/main-kwgzbg89eakqnfcerhmbftkv5twzp7ht
                                                   └─────────── token ────────────┘
                </pre>

                ```sh
                curl -H "Authorization: Token $TOKEN" https://api.tugboatqa.com
                ```

    schemas:
        Error:
            type: object
            properties:
                code:
                    type: integer
                    description: A numeric error code representing the error
                message:
                    type: string
                    description: A human-readable message describing the error

        PermissionDeniedError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1000
                message: Permission Denied

        UnauthorizedError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1000
                message: Permission Denied

        ### Objects

        ObjectId:
            type: string
            maxLength: 24
            minLength: 24
            example: 5d55823f30af7a1be3899ca4

        Object:
            type: object
            oneOf:
                - $ref: '#/components/schemas/Service'
                - $ref: '#/components/schemas/Preview'
                - $ref: '#/components/schemas/Repo'
                - $ref: '#/components/schemas/Project'
                - $ref: '#/components/schemas/Key'
                - $ref: '#/components/schemas/Message'
                - $ref: '#/components/schemas/Screenshot'
                - $ref: '#/components/schemas/VisualDiff'
                - $ref: '#/components/schemas/LighthouseReport'
                - $ref: '#/components/schemas/Job'

        ### Keys

        KeyId:
            description: A unique API Key ID
            example: 5d9b5bfb52163ce4e1508c07
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        Key:
            type: object
            properties:
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp when the API Key was created
                id:
                    allOf:
                        - $ref: '#/components/schemas/KeyId'
                    readOnly: true
                lastUsed:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the API Key was last used
                name:
                    type: string
                    description: A human-readable label for the API Key
                    example: My API Key
                type:
                    type: string
                    enum: [key]
                    readOnly: true
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the API Key was last modified

        NewKey:
            allOf:
                - $ref: '#/components/schemas/Key'
            properties:
                key:
                    type: string
                    description:
                        The API Key plain-text value. This is the value that is sent back to the API for authentication,
                        and is only returned when an API Key is first created. It is then salted and hashed for storage,
                        and the plain-text value is discarded.
                    example: xrunytpsqcht9wh28xwtringweuf86vv

        UnknownKeyError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1031
                message: Unknown API Key

        ### Projects

        ProjectId:
            description: A unique Project ID
            example: 5d810c19f6f8203d5b65ef01
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        Project:
            type: object
            properties:
                abandoned:
                    type: integer
                    readOnly: true # admin-only
                    description: Number of days of inactivity before considering a preview "abandoned"
                    example: 30
                admins:
                    type: array
                    readOnly: true # admin-only
                    description: An array of API Key IDs that have admin access to the project
                    items:
                        $ref: '#/components/schemas/KeyId'
                    example:
                        - 5d9d0b3482384d8f75f43e1c
                        - 5d9d0b3682384d8f75f43e1d
                base:
                    type: boolean
                    readOnly: true # admin-only
                    description: Whether the project allows base previews
                build_memory:
                    type: integer
                    readOnly: true # admin-only
                    description: How much memory to allocate to each service container at build-time (MB)
                    example: 1536
                cpus:
                    type: number
                    format: double
                    readOnly: true # admin-only
                    description: CPU quota for each Service container in the Project
                    example: 0.5
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Project was created
                    example: 2019-09-17T16:38:49.479Z
                domain:
                    type: string
                    format: hostname
                    description:
                        The default domain to use for Preview links in this Project. If not set, `tugboatqa.com` is
                        used.
                    example: example.com
                email_expire:
                    type: integer
                    readOnly: true # admin-only
                    description:
                        How long captured email for Previews in the Project will be stored before being deleted. If set
                        to zero, captured email is not automatically deleted
                    minimum: 0
                    example: 24
                email_limit:
                    type: integer
                    readOnly: true # admin-only
                    description: Maximum number of emails to capture for each Preview in the Project
                    minimum: 1
                    example: 20
                guests:
                    type: array
                    readOnly: true # admin-only
                    description: An array of API Key IDs that have read-only access to the Project
                    items:
                        $ref: '#/components/schemas/KeyId'
                    example:
                        - 5d9d0b5982384d8f75f43e1e
                        - 5d9d0b6182384d8f75f43e1f
                id:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                memory:
                    type: integer
                    readOnly: true # admin-only
                    description: How much memory to allocate to each service container during normal operation (MB)
                    example: 1024
                name:
                    type: string
                    description: A human-readable label for the Project
                    example: My Project
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                quota:
                    type: integer
                    readOnly: true # admin-only
                    description: Disk quota to enforce for the Previews in a Project (GB)
                    example: 2
                repos:
                    type: array
                    readOnly: true
                    description: An array of Repository IDs that belong to the Project
                    items:
                        $ref: '#/components/schemas/RepoId'
                size:
                    type: integer
                    readOnly: true
                    description: The current size of all of the Previews in the Project, in bytes
                    example: 458021017
                sleep:
                    type: integer
                    readOnly: true # admin-only
                    description: Previews in the Project are suspended after this many minutes of inactivity
                    example: 15
                type:
                    type: string
                    readOnly: true
                    enum: [project]
                updatedAt:
                    type: string
                    format: 'date-time'
                    readOnly: true
                    description: The timestamp of when the Project was last modified
                    example: 2019-10-07T16:00:12.441Z
                users:
                    type: array
                    readOnly: true # admin-only
                    description: An array of API key IDs that have user access to the project
                    items:
                        $ref: '#/components/schemas/KeyId'
                    example:
                        - 5d9d0b6e82384d8f75f43e20
                        - 5d9d0b7482384d8f75f43e21

        UnknownProjectError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1032
                message: Unknown Project

        ### Repositories

        RepoId:
            description: A unique Repository ID
            example: 5d810c19f6f82083ed65ef03
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        Repo:
            type: object
            properties:
                admins:
                    type: array
                    readOnly: true # admin-only
                    description: An array of API Key IDs that have admin access to the Repository
                    items:
                        $ref: '#/components/schemas/KeyId'
                    example:
                        - 5d9d0b3482384d8f75f43e1c
                        - 5d9d0b3682384d8f75f43e1d
                autobuild:
                    type: boolean
                    default: true
                    description: Whether to automatically create a Preview when a pull request is created
                autobuild_drafts:
                    type: boolean
                    default: true
                    description:
                        Whether to automatically create or update draft pull requests are created or updated; this is
                        currently only supported on GitHub or GitLab repositories
                autorebuild:
                    type: boolean
                    default: true
                    description:
                        Whether to automatically rebuild a Preview when code is pushed to a pull request with an
                        existing Preview
                autoredeploy:
                    type: boolean
                    default: false
                    description:
                        When new code is pushed, deploy the new code without losing any non-code changes to the preview;
                        Requires autorebuild to be enabled
                autodelete:
                    type: boolean
                    default: true
                    description: Whether to automatically delete a Preview when its pull request is merged or closed
                build_timeout:
                    type: number
                    description:
                        How long, in seconds, to let a Preview build, rebuild, or refresh run before throwing a timeout
                        error
                    default: 3600
                    minimum: 1
                    maximum: 18000
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Repository was created
                    example: 2019-09-17T16:38:49.924Z
                deploy_id:
                    type: integer
                    readOnly: true
                    description: The provider-specific ID of the deploy key for this Repository
                    example: 1234567890
                deploy_public:
                    type: string
                    readOnly: true
                    description: A unique, 4096-bit RSA deploy key for this Repository
                    example:
                        ssh-rsa
                        AAAAB3NzaC1yc2EAAAADAQABAAABAQCxgtsuIGC+H0YZuJx/jlE66xsyAo8rKtoPJbsNww1R+Upzaw5RLbiasUmvtCmt6dSUERnFgnKXgll+QboZaPMJYo0hbYvuCd/+SxZQAKb9rpTEBP9aKgvHvMHKI1b9WNxtdrN7uKqbhvqALA9tNOD7alSB5tPdw+57n99SDquZ7X4wq4fuoi4hV0cgp5dlvsN0kJPildikYMENZPG7duCJXJSp5nvxUBXsrJYm9b7lQmmA1nYdxP+18CGcJa6Hap39RSJrKQIL9uxWN5QY9DXLNh4l8Hm9AnXNbptuGUXyyAJDpklfuYDQtXEmYXXo6HP/AccKwDKcxo9/pDKzu859'
                domain:
                    type: string
                    format: hostname
                    description:
                        The default domain to use for Preview links in this Repository. If not set, the Project domain
                        is used.
                    example: example.com
                envvars:
                    type: array
                    description: |
                        An array of environment variable definitions that are injected into every Service container
                        created for this Repository. By default, a list of strings is returned, in order to maintain API
                        backward compatibility. To request the newer format, which is an array of objects with metadata
                        about the environment variables, an Accept header must be sent with the request.

                        ```
                        Accept: application/vnd.tugboat.propeller+json
                        ```

                        Either format is accepted as an argument to set environment variables.
                    items:
                        oneOf:
                            - type: string
                              description:
                                  A string representation of an environment variable assignment, exactly how it would be
                                  defined in a shell script
                              example: NAME=value
                            - type: object
                              required:
                                  - name
                                  - value
                              properties:
                                  name:
                                      type: string
                                      description: The environment variable name
                                  value:
                                      type: string
                                      description: The environment variable value
                                  scope:
                                      description:
                                          The environment variable scope. Environment variables can be available to a
                                          preview at build-time, or at run-time, or both (or neither, but that is not
                                          very helpful).
                                      type: array
                                      default: [build, run]
                                      items:
                                          type: string
                                          enum: [build, run]
                git:
                    type: string
                    format: uri
                    readOnly: true
                    description: The address of the remote git repository
                    example: git@github.com:myorg/myrepo.git
                guests:
                    type: array
                    readOnly: true # admin-only
                    description: An array of API Key IDs that have read-only access to the Repository
                    items:
                        $ref: '#/components/schemas/KeyId'
                    example:
                        - 5d9d0b5982384d8f75f43e1e
                        - 5d9d0b6182384d8f75f43e1f
                id:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                ip_allow:
                    type: array
                    description:
                        A set of IP addresses and/or CIDR subnets that are allowed to view the Previews in this
                        Repository. If not set, the Previews in this Repository are publicly accessible by any IP
                        address.
                    items:
                        type: string
                    example:
                        - 10.2.3.4
                        - 192.168.1.0/24
                        - fe80::/64
                ip_deny:
                    type: array
                    description:
                        A set of IP addresses and/or CIDR subnets that are not allowed to view the Previews in this
                        Repository. If not set, the Previews in this Repository are publicly accessible by any IP
                        address.
                    items:
                        type: string
                    example:
                        - 10.2.3.4
                        - 192.168.1.0/24
                        - fe80::/64
                link:
                    type: string
                    format: uri
                    readOnly: true
                    description: The link to the repository on the web
                    example: https://github.com/myorg/myrepo
                name:
                    type: string
                    description: A human-readable label for the Repository
                    example: myorg/myrepo
                owner:
                    allOf:
                        - $ref: '#/components/schemas/KeyId'
                    readOnly: true
                    description: The ID of the API Key that created the Repository
                previews:
                    type: array
                    readOnly: true
                    description: An array of Preview IDs that belong to the Repository
                    items:
                        $ref: '#/components/schemas/PreviewId'
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                provider:
                    allOf:
                        - $ref: '#/components/schemas/ProviderName'
                    readOnly: true
                provider_comment:
                    type: boolean
                    default: false
                    description:
                        Whether pull request Previews built for this Repository add a comment to the pull request after
                        a successful build, rebuild, or refresh
                provider_config:
                    type: object
                    readOnly: true
                    description:
                        An object containing the provider-specific configuration for the Project. Includes information
                        such as the organization or team, and the name of the repository at the provider
                provider_deployment:
                    type: boolean
                    default: false
                    description:
                        Whether pull request Previews built for this Repository update the provider's deployment API,
                        where supported
                provider_forks:
                    type: boolean
                    default: false
                    description:
                        Whether Previews are allowed to be created for pull requests from forked git repositories.
                        Enabling this can be dangerous for a public repository.
                provider_status:
                    type: boolean
                    default: true
                    description:
                        Whether pull request Previews built for this Repository update the provider's status API, where
                        supported
                quota:
                    type: integer
                    description:
                        A disk quota to enforce on the repository, in GB. Setting this to `0` means the repository has
                        no enforced quota. If this quota is larger than the quota set on the repository's parent
                        project, or if the sum of quotas of all of the repositories in a project is larger than the
                        projects's quota, the project's quota is still enforced
                rebuild_orphaned:
                    type: boolean
                    default: false
                    description:
                        Whether to rebuild Previews in this Repository when the Base Prevew they were built from is
                        rebuilt
                rebuild_stale:
                    type: boolean
                    default: false
                    description:
                        Whether to rebuild Previews in this Repository when the Base Prevew they were built from is
                        refreshed
                refresh_anchors:
                    type: boolean
                    default: true
                    description:
                        Whether to automatically refresh anchored Base Previews in this Repository (Previews with an
                        `anchor` property set to `true`)
                refresh_day:
                    type: number
                    minimum: 0
                    maximum: 7
                    default: 7
                    description: |
                        Which day of the week to automatically refresh anchored Base Previews, when `refresh_anchors` is
                        enabled

                          * `0` = Sunday
                          * `1` = Monday
                          * `2` = Tuesday
                          * `3` = Wednesday
                          * `4` = Thursday
                          * `5` = Friday
                          * `6` = Saturday
                          * `7` = Every Day
                refresh_hour:
                    minimum: 0
                    maximum: 24
                    default: 0
                    description: |
                        Which our of the day to automatically refresh anchored Base Previews, when `refresh_anchors` is
                        enabled

                          * `0` = 00:00 UTC
                          * `24` = Every Hour
                registries:
                    type: array
                    description: An array of Registry IDs that the Repository will use to pull Service images
                    readOnly: true
                    items:
                        $ref: '#/components/schemas/RegistryId'
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                size:
                    type: integer
                    readOnly: true
                    description: The current size of all of the Previews in the Repository, in bytes
                    example: 458027915
                ssh_public:
                    type: string
                    readOnly: true
                    description:
                        A unique 4096-bit RSA public key used by default for ssh-based commands in build scripts for
                        Previews in the Repository
                    example:
                        ssh-rsa
                        AAAAB3NzaC1yc2EAAAADAQABAAABAQCxgtsuIGC+H0YZuJx/jlE66xsyAo8rKtoPJbsNww1R+Upzaw5RLbiasUmvtCmt6dSUERnFgnKXgll+QboZaPMJYo0hbYvuCd/+SxZQAKb9rpTEBP9aKgvHvMHKI1b9WNxtdrN7uKqbhvqALA9tNOD7alSB5tPdw+57n99SDquZ7X4wq4fuoi4hV0cgp5dlvsN0kJPildikYMENZPG7duCJXJSp5nvxUBXsrJYm9b7lQmmA1nYdxP+18CGcJa6Hap39RSJrKQIL9uxWN5QY9DXLNh4l8Hm9AnXNbptuGUXyyAJDpklfuYDQtXEmYXXo6HP/AccKwDKcxo9/pDKzu859
                type:
                    type: string
                    readOnly: true
                    enum: [repo]
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Repository was last modified
                    example: 2019-10-07T18:30:18.725Z
                users:
                    type: array
                    readOnly: true # admin-only
                    description: An array of API key IDs that have user access to the Repository
                    items:
                        $ref: '#/components/schemas/KeyId'
                    example:
                        - 5d9d0b6e82384d8f75f43e20
                        - 5d9d0b7482384d8f75f43e21
                webhook:
                    type: string
                    readOnly: true
                    description: The Repository listens for webhooks at this URL
                    example: https://webhooks.tugboatqa.com/github/k937etwgurfsbvh08d9chifqmj6vyset

        UnknownRepoError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1033
                message: Unknown Repository

        RepoBranch:
            type: object
            properties:
                name:
                    type: string
                    readOnly: true
                    description: The branch name
                    example: foo
                type:
                    type: string
                    readOnly: true
                    enum: [branch]
                ref:
                    type: string
                    readOnly: true
                    description: The full git ref of the branch
                    example: refs/heads/foo
                url:
                    type: string
                    readOnly: true
                    description: The URL to view the branch at the Repository provider
                    example: https://github.com/TugboatQA/demo/tree/foo
                raw:
                    type: object
                    readOnly: true
                    description: The object returned by the provider API for the branch

        RepoPullRequest:
            type: object
            properties:
                created:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the pull request was created
                destination:
                    type: object
                    readOnly: true
                    description: The destination branch of the pull request
                    properties:
                        repository:
                            type: string
                            readOnly: true
                            description: The repository of the destination branch
                        branch:
                            type: string
                            readOnly: true
                            description: The name of the destination branch
                name:
                    type: string
                    readOnly: true
                    description: The name of the pull request
                    example: Set up Tugboat
                number:
                    type: string
                    readOnly: true
                    description: The pull request number
                    example: 123
                raw:
                    type: object
                    readOnly: true
                    description: The object returned by the provider API for the pull request
                source:
                    type: object
                    readOnly: true
                    description: The source branch of the pull request
                    properties:
                        repository:
                            type: string
                            readOnly: true
                            description: The repository of the source branch
                        branch:
                            type: string
                            readOnly: true
                            description: The name of the source branch
                type:
                    type: string
                    readOnly: true
                    enum: [pullrequest]
                updated:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the pull request was last modified
                url:
                    type: string
                    readOnly: true
                    description: The URL to view the pull request at the Repository provider
                    example: https://github.com/TugboatQA/demo/pull/123

        RepoTag:
            type: object
            properties:
                name:
                    type: string
                    readOnly: true
                    description: The name of the tag
                    example: bar
                type:
                    type: string
                    readOnly: true
                    enum: [tag]
                ref:
                    type: string
                    readOnly: true
                    description: The full git ref of the tag
                    example: refs/tags/bar
                url:
                    type: string
                    readOnly: true
                    description: The URL to view the tag at the Repository provider
                    example: https://api.github.com/repos/TugboatQA/demo/git/refs/tags/bar
                raw:
                    type: object
                    readOnly: true
                    description: The object returned by the provider API for the tag

        ### Previews

        PreviewId:
            description: A unique Preview ID
            example: 5d9b842252163ca8a1508c11
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        Preview:
            type: object
            properties:
                anchor:
                    type: boolean
                    description: Whether the Preview is used as a default Base Preview for the Repository
                    example: false
                anchor_type:
                    type: string,
                    enum: [repo, branch]
                    description: |
                        When `anchor` is `true`, this defines how the preview is used as a default Base Preview

                        - `repo` - Automatically use this Preview as a Base Preview for all new Previews built for the
                        Repository

                        - `branch` - Automatically use this Preview as a Base Preview for new pull request Previews that
                        merge into the branch used to create this Preview. This anchor type can only be set on branch
                        Previews
                    example: 'all'
                base:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                    description: the ID of a Preview's Base Preview
                    example: 5d9b59f952163c73a0508bb5
                build_begin:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Preview's last build started
                    example: 2019-10-07T18:29:55.631Z
                build_end:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Preview's last build ended
                    example: 2019-10-07T18:30:18.664Z
                children:
                    type: array
                    readOnly: true
                    description: An array of IDs for Previews that were built using this Preview as a Base Preview
                    items:
                        $ref: '#/components/schemas/PreviewId'
                clone:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                    description:
                        When a Preview is created by cloning another Preview, this track the ID of the original Preview
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Preview was created
                    example: 2019-10-07T18:29:54.123Z
                config:
                    type: object
                    description:
                        An optional Preview configuration to use instead of trying to read config.yml from the git
                        repository.
                    properties:
                        services:
                            type: object
                            additionalProperties:
                                allOf:
                                    - $ref: '#/components/schemas/ServiceConfig'
                                description:
                                    A Service configuration. The name of this property corresponds with the name of the
                                    service, and must be a valid host name no longer than 39 characters.
                default_service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    readOnly: true
                    description: The ID of the default Service for the Preview
                dirty:
                    type: boolean
                    readOnly: true
                    description:
                        This is true when a Preview has been Redeployed, signifying that the preview is using additional storage.
                    example: false
                expires:
                    type: string
                    format: date-time
                    description: If set, the Preview will automatically be deleted at this time
                    example: 2019-10-07T18:30:18.664Z
                failed:
                    allOf:
                        - $ref: '#/components/schemas/PreviewState'
                    readOnly: true
                    description: If the Preview is in a `failed` state, this stores the previous state
                hits:
                    type: integer
                    readOnly: true
                    description: The number of HTTP requests that have been served by the Preview
                    example: 1234
                id:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                job:
                    allOf:
                        - $ref: '#/components/schemas/JobId'
                    readOnly: true
                    description: The ID of an active job operating on the Preview
                lasthit:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of the last HTTP request served by the Preview
                    example: 2019-10-07T20:09:13.330Z
                locked:
                    type: boolean
                    description: Whether the Preview is locked
                    example: false
                mail:
                    type: array
                    readOnly: true
                    description: An array Mail Message IDs that were sent by the Preview and captured by Tugboat
                    items:
                        - $ref: '#/components/schemas/MessageId'
                name:
                    type: string
                    description: A human-readable label for the Preview
                orphaned:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                    description:
                        When the Preview was built from a Base Preview, but that Base Preview has since been rebuilt,
                        this tracks the ID of that Base Preview
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                provider:
                    allOf:
                        - $ref: '#/components/schemas/ProviderName'
                    readOnly: true
                provider_comment:
                    readOnly: true
                    description:
                        provider-specific information about the most recent build comment posted to the provider
                    oneOf:
                        - type: integer
                          example: 12345
                        - type: object
                          properties:
                              id:
                                  type: integer
                              version:
                                  type: integer
                provider_id:
                    type: string
                    readOnly: true
                    description: The provider's pull request ID, commit SHA, or git ref of the Preview
                provider_label:
                    type: string
                    readOnly: true
                    description: The provider's label for the Preview
                provider_link:
                    type: string
                    format: uri
                    readOnly: true
                    description: URL to view the provider resource in a web browser
                provider_link_sha:
                    type: string
                    format: uri
                    readOnly: true
                    description: URL to the SHA tree view if the provider supports a direct link
                provider_ref:
                    type: object
                    readOnly: true
                    description: The raw ref data from the provider
                provider_type:
                    type: string
                    readOnly: true
                    description: The provider ref type
                    enum: [branch, commit, mergerequest, pullrequest, tag]
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                services:
                    type: array
                    readOnly: true
                    description: An array of Service IDs that belong to the Preview
                    items:
                        $ref: '#/components/schemas/ServiceId'
                ref:
                    type: string
                    readOnly: true
                    description: The name of the git ref or pull request that the Preview was built from
                    example: pr123
                sha:
                    type: string
                    readOnly: true
                    description: The git SHA that the Preview was built from
                    example: aa5db6479307593d10257ee03256f47f2abfdf8a
                size:
                    type: integer
                    readOnly: true
                    description: The total disk space used by the Preview, in bytes
                    example: 1921191078
                stale:
                    type: boolean
                    readOnly: true
                    description:
                        When a Preview's Base Preview is refreshed, the Preview is considered "stale" until it is
                        rebuilt against the new Base Preview
                    example: false
                state:
                    allOf:
                        - $ref: '#/components/schemas/PreviewState'
                    readOnly: true
                suspended:
                    allOf:
                        - $ref: '#/components/schemas/PreviewState'
                    readOnly: true
                    description: If the Preview is in a `suspended` state, this stores the previous state
                type:
                    type: string
                    readOnly: true
                    enum: [preview]
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Preview was last modified
                    example: 2019-10-07T20:30:11.933Z
                url:
                    type: string
                    format: uri
                    readOnly: true
                    description: The default URL for the Preview
                    example: https://pr123-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com
                urls:
                    type: array
                    readOnly: true
                    description: Any aliases for the default Preview URL
                    items:
                        type: string
                        format: uri
                    example:
                        - https://pr123-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com
                        - https://foo-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com
                        - https://bar-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com
                visualdiffs:
                    type: boolean
                    readOnly: true
                    description: Whether post-build visualdiff processing is currently being performed for the Preview
                    example: false

        UnknownPreviewError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1039
                message: Unknown Preview

        DeletePreviewError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1041
                message: Cannot delete preview

        RebuildPreviewError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1046
                message: Cannot rebuild preview

        RedeployPreviewError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1147
                message: Cannot redeploy preview

        ### Services

        ServiceId:
            description: A unique Service ID
            example: 5d9b842352163cc294508c15
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        Service:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/ServiceId'
                config:
                    $ref: '#/components/schemas/ServiceConfig'
                containerSize:
                    type: integer
                    description:
                        The size of the Service container calculated at the last time the Service was suspended, in
                        bytes. This shows how much data has changed since the Service was last built.
                    example: 20
                createdAt:
                    type: string
                    description: The timestamp of when the Service was created
                    format: date-time
                    example: 2019-10-07T18:29:55.903Z
                imageSize:
                    type: integer
                    description:
                        The size of the Service image, created at the end of the last time the Service was built, in
                        bytes
                    example: 458020989
                job:
                    allOf:
                        - $ref: '#/components/schemas/JobId'
                    readOnly: true
                    description: The ID of an active job operating on the Service
                name:
                    type: string
                    description: The name, and internal hostname of the Service, defined in config.yml
                    example: php
                preview:
                    $ref: '#/components/schemas/PreviewId'
                project:
                    $ref: '#/components/schemas/ProjectId'
                repo:
                    $ref: '#/components/schemas/RepoId'
                screenshots:
                    type: array
                    description: An array of screenshots that belong to the Service
                    items:
                        $ref: '#/components/schemas/ScreenshotId'
                service:
                    $ref: '#/components/schemas/ServiceId'
                size:
                    type: integer
                    description: The current total size of the Service
                    example: 458021017
                state:
                    $ref: '#/components/schemas/ServiceState'
                token:
                    type: string
                    description: A unique token assigned to the Service, used to generate the Service URLs
                    example: ppdnvfoqzimnqbpoovrxnahbvhsprlq3
                type:
                    type: string
                    enum: [service]
                updatedAt:
                    type: string
                    description: The timestamp of when the Service was last modified
                    format: date-time
                    example: 2019-10-07T16:00:12.390Z
                urls:
                    type: array
                    description: An array of URLs that route to the Service
                    items:
                        type: string
                        format: uri
                    example:
                        - https://pr123-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com
                        - https://foo-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com
                        - https://bar-oxfkwf6z6cqr91cdorjwwzwuur9jujvr.tugboatqa.com

        ServiceConfig:
            type: object
            description: A Service configuration as defined in config.yml
            externalDocs:
                url: https://docs.tugboatqa.com/reference/tugboat-configuration
            properties:
                alias_type:
                    type: string
                    description: What type of alias to use when Service aliases are defined
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#alias-type
                    enum:
                        - domain
                        - default
                    example: default
                aliases:
                    type: array
                    description: An array of Service aliases, used to generate alternate Service URLs
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#aliases
                    items:
                        type: string
                    example:
                        - foo
                        - bar
                checkout:
                    type: boolean
                    description: Whether to clone the git repository to the Service
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#checkout
                checkout_path:
                    type: string
                    description: Where the git repository is cloned in the Service
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#checkout-path
                    example: /var/lib/tugboat
                commands:
                    type: object
                    description: A set of commands to run for various build stages
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#commands
                    properties:
                        init:
                            description:
                                Commands that set up the basic Preview infrastructure, such as installing required
                                packages or tools
                            type: array
                            items:
                                type: string
                            example:
                                - a2enmod headers rewrite
                                - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"
                        update:
                            description:
                                Commands that import data or other assets into a Service, such as a database or image
                                files
                            type: array
                            items:
                                type: string
                            example:
                                - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"
                        build:
                            description:
                                Commands that build or generate the site, such as compiling Sass or running database
                                updates from code
                            type: array
                            items:
                                type: string
                            example:
                                - drush -r "${DOCROOT}" cache-clear all
                                - drush -r "${DOCROOT}" updb -y
                        ready:
                            description:
                                Commands that indicate that a service is "ready", such as checking for a listening TCP
                                port
                            type: array
                            items:
                                type: string
                        online:
                            description:
                                Commands that should be run only once, after a Preview has finished building, and is
                                online and ready to accept incoming requests.
                            type: array
                            items:
                                type: string
                            example:
                                - curl -LI http://localhost
                        start:
                            description: Commands that should be run every time a Preview starts
                            type: array
                            items:
                                type: string
                            example:
                                - touch /tmp/controlfile
                        clone:
                            description: Commands that should be run when a Preview is cloned
                            type: array
                            items:
                                type: string
                            example:
                                - ln -snf "${TUGBOAT_ROOT}" "${DOCROOT}/${TUGBOAT_PREVIEW_ID}"
                default:
                    type: boolean
                    description: Whether this is the default Service for its Preview
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#default
                    example: true
                depends:
                    type: array
                    description: An array of other Services that this Service depends on
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#depends
                    items:
                        type: string
                    example:
                        - mysql
                domain:
                    type: string
                    format: hostname
                    description: A custom domain for the generated Service URLs
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#domain
                    example: example.com
                expose:
                    type: string
                    description: Which port the Service is listening on for HTTP requests
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#expose
                    example: 80
                http:
                    type: boolean
                    description: Whether the Service should be available via HTTP
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#http
                    example: false
                https:
                    type: boolean
                    description: Whether the Service should be available via HTTPS
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#https
                    example: true
                image:
                    type: string
                    format: uri
                    description: The Docker image to use for the Service
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#image
                    example: tugboatqa/httpd:2.4
                subpath:
                    type: boolean
                    description: Whether subpath URLs should be generated for the Service instead of subdomain URLs
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#subpath
                    example: false
                subpath_map:
                    type: boolean
                    description: Whether to map generated subpath URLs to "/" when forwarding requests to the Service
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#subpath-map
                    example: true
                visualdiffs:
                    type: array
                    description: A set of Visual Diffs to generate for the Service
                    externalDocs:
                        url: https://docs.tugboatqa.com/reference/tugboat-configuration/#visualdiffs
                    items:
                        type: object
                        properties:
                            aliases:
                                type: array
                                description: An array of Service aliases to create a Visual Diff for
                                items:
                                    type: string
                                example:
                                    - ':default'
                            fullPage:
                                type: boolean
                                description:
                                    Whether to use the default screenshot method, or an alternate version that is more
                                    friendly to elements that use `vh` CSS styles
                                example: true
                            timeout:
                                type: integer
                                description:
                                    How long to wait for a page to be ready before creating a screenshot to use for a
                                    Visual Diff
                                example: 30
                            url:
                                type: string
                                description: The relative URL to create a Visual Diff for
                                example: /about
                            waitUntil:
                                type: array
                                description:
                                    An array of document events to wait for before creating a screenshot for a Visual
                                    Diff
                                items:
                                    type: string
                                    enum:
                                        - domcontentloaded
                                        - load
                                        - networkidle0
                                        - networkidle2
                                    example:
                                        - load

        ServiceOutput:
            type: object
            properties:
                service:
                    $ref: '#/components/schemas/ServiceId'
                level:
                    type: string
                    enum: [stdout, stderr]
                message:
                    type: string
                    example:
                        '[Wed Oct 09 15:51:40.951405 2019] [mpm_event:notice] [pid 7:tid 139727648928896] AH00489:
                        Apache/2.4.41 (Unix) configured -- resuming normal operations'

        UnknownServiceError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1044
                message: Unknown Service

        ### Screenshots

        ScreenshotId:
            description: A unique Screenshot ID
            example: 5d9b94b5ca88fe9a6566ab87
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        Screenshot:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/ScreenshotId'
                alias:
                    type: string
                    description: A Service alias used to create the Screenshot
                    example: foo
                createdAt:
                    type: string
                    description: The timestamp of when the Screenshot was created
                    format: date-time
                    example: 2019-10-07T19:40:37.628Z
                error:
                    type: string
                    description: If there was an error while generating the Screenshot, it is stored here.
                fullPage:
                    type: boolean
                    description:
                        Whether to use the default full-page renderer, or an alternative that is sometimes less accurate
                        but is more friendly to pages that use `vh` CSS styles
                    default: true
                preview:
                    $ref: '#/components/schemas/PreviewId'
                project:
                    $ref: '#/components/schemas/ProjectId'
                repo:
                    $ref: '#/components/schemas/RepoId'
                screen:
                    $ref: '#/components/schemas/ScreenshotSize'
                service:
                    $ref: '#/components/schemas/ServiceId'
                size:
                    type: integer
                    description: The size of the Screenshot image, in bytes
                    example: 569713
                timeout:
                    type: integer
                    description: How long to wait for a page to be ready when taking a screenshot, in seconds.
                    minimum: 1
                    maximum: 300
                    default: 30
                updatedAt:
                    type: string
                    format: date-time
                    description: The timestamp of when the Screenshot was last modified
                    example: 2019-10-07T19:40:37.628Z
                url:
                    type: string
                    format: path
                    description: The relative URL of the Screenshot
                    example: /about
                full_url:
                    type: string
                    format: url
                    dscription: The full URL of the Screenshot
                    example: https://main-u1ogb7uttuq1dleg0opfkduulytufwii.tugboatqa.com/about
                visualdiffs:
                    type: array
                    description: An array of Visual Diffs created from this Screenshot
                    items:
                        $ref: '#/components/schemas/VisualDiffId'
                waitUntil:
                    description: Which events to wait for before creating a screenshot of a page.
                    type: array
                    items:
                        type: string
                        enum: ['load', 'domcontentloaded', 'networkidle0', 'networkidle2']
                    default: ['load']

        ScreenshotData:
            properties:
                data:
                    type: string
                    format: byte
                    example: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAACXBIWXMAAAsSAAALEgHS3X78AAAAqUlEQVQY02PQa3/0H4T1Ox7jxCB5BhDDoBMhgK5JFyrGoNP26L/rlKf/jbsQkiAxGIaJM6g2PfrftO31/0Un3v2PW/T8f+PW1/979rz53737zf9pB9/+T1j8/L9WK9BEbSARPu/5//zVL/9b9z35HzDr2f/I+c/BOGzus/+WvU/AJoPdqN786L9y40OwgEbLIzAfhnXbIG5mADnUAMgwhHrIAA2j+JoYDACbJ9VfpSfMZAAAAABJRU5ErkJggg==
            allOf:
                - $ref: '#/components/schemas/Screenshot'

        ScreenshotSize:
            type: string
            description: The size of screen emulated for a Screenshot
            enum:
                - mobile
                - tablet
                - desktop
                - pdf

        UnknownScreenshotError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1088
                message: Unknown Screenshot

        ### Visual Diffs

        VisualDiffId:
            description: A unique Visual Diff ID
            example: 5d9b94b7ca88fe9a6566abfc
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        VisualDiff:
            type: object
            properties:
                id:
                    allOf:
                        - $ref: '#/components/schemas/VisualDiffId'
                    readOnly: true
                screenshot:
                    readOnly: true
                    description: The ID of the Screenshot to generate a Visual Diff for
                    example: 5d9b94b5ca88fe9a6566ab4b
                    allOf:
                        - $ref: '#/components/schemas/ScreenshotId'
                base:
                    readOnly: true
                    description: The ID of the Screenshot used to compare the Visual Diff's parent Screenshot
                    example: 5d9b94b5ca88fe9a6566ab87
                    allOf:
                        - $ref: '#/components/schemas/ScreenshotId'
                after:
                    type: string
                    enum: ['new', 'rendering', 'ready', 'error']
                    default: new
                    readOnly: true
                    description: The state of the "after" image for this Visual Diff
                approved:
                    type: boolean
                    default: null
                    example: true
                    description:
                        Whether the Visual Diff was manually approved or unapproved. If neither have happened, the value
                        of this field is `null`
                approvedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description:
                        If the Visual Diff has been manually approved or unapproved, this is the timestamp of when that
                        happened
                    example: 2019-10-07T19:40:39.237Z
                approvedBy:
                    readOnly: true
                    description:
                        If the Visual Diff has been manually approved or unapproved, this is the API key that performed
                        that action
                    allOf:
                        - $ref: '#/components/schemas/KeyId'
                before:
                    type: string
                    enum: ['new', 'rendering', 'ready', 'error']
                    default: new
                    readOnly: true
                    description: The state of the "before" image for this Visual Diff
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Visual Diff was created
                    example: 2019-10-07T19:40:39.237Z
                differences:
                    type: integer
                    readOnly: true
                    description: The number of pixels that are different between the "before" and "after" Screenshots
                    example: 1368712
                dimension:
                    type: integer
                    readOnly: true
                    description: The total number of pixels in the Visual Diff image
                    example: 1470000
                error:
                    type: string
                    readOnly: true
                    description: If there was an error while rendering the Visual Diff, it is stored here
                height:
                    type: number
                    readOnly: true
                    description: The height of the Visual Diff image, in pixels
                    example: 1050
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                screen:
                    allOf:
                        - $ref: '#/components/schemas/ScreenshotSize'
                    readOnly: true
                service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    readOnly: true
                size:
                    type: integer
                    description: The size of the Visual Diff image, in bytes
                    readOnly: true
                    example: 25612
                stale:
                    type: boolean
                    readOnly: true
                    description:
                        Whether the Base Service or the Screenshot used to create the Visual Diff "before" or "after"
                        images have changed or have been deleted.
                    example: false
                threshold:
                    type: number
                    example: 10
                    description: The maximum allowed percentage change between the "before" and "after" screenshots.
                    default: 100
                type:
                    readOnly: true
                    type: string
                    enum: [visualdiff]
                width:
                    readOnly: true
                    type: integer
                    description: The width of the Visual Diff image, in pixels
                    example: 1400

        VisualDiffData:
            properties:
                data:
                    type: object
                    properties:
                        after:
                            $ref: '#/components/schemas/VisualDiffAfter'
                        before:
                            $ref: '#/components/schemas/VisualDiffBefore'
                        diff:
                            $ref: '#/components/schemas/VisualDiffDiff'
            allOf:
                - $ref: '#/components/schemas/VisualDiff'

        VisualDiffBefore:
            type: string
            format: byte
            example: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAACXBIWXMAAAsSAAALEgHS3X78AAAAqUlEQVQY02PQa3/0H4T1Ox7jxCB5BhDDoBMhgK5JFyrGoNP26L/rlKf/jbsQkiAxGIaJM6g2PfrftO31/0Un3v2PW/T8f+PW1/979rz53737zf9pB9/+T1j8/L9WK9BEbSARPu/5//zVL/9b9z35HzDr2f/I+c/BOGzus/+WvU/AJoPdqN786L9y40OwgEbLIzAfhnXbIG5mADnUAMgwhHrIAA2j+JoYDACbJ9VfpSfMZAAAAABJRU5ErkJggg==

        VisualDiffAfter:
            type: string
            format: byte
            example: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAACXBIWXMAAAsSAAALEgHS3X78AAAAoUlEQVQY02NgCGH4D8aheDBIHsRgCmNCCIRgUQRWGMzwXzpd+j9rBCtCMgiIgyEYLs7gy/A/fUb6/75Nff+tqq3+p05P/V+8oPh/0fyi//Ur6v/b1Nj8ZwgEKQQSRmVG//07/f/zx/P/1yzQ/G9abvrfpNzkv0GJwX+eWB6I6WBj/YHYG2odiO2HhIOhzgE5lDGMEe4hxlBGMB+GUXxNDAYAGdd2iFCYX/YAAAAASUVORK5CYII=

        VisualDiffDiff:
            type: string
            format: byte
            example: iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAACXBIWXMAAAsSAAALEgHS3X78AAAArUlEQVQY02NY81znPwivfqaLE4PkGcCcpwgBdE0wMYY1L3T+L7lp9H/VEz2EJFAMhmHiDOvfaP3v3eD0v2mO1//ZJyz/929y+t+1yvV/92qX/+1L3P/POm75f+1L7f8Ma1/q/J97xvz/1L22/5ffN/g//6Lp/zmnLYDY/P+8c+b/VzzQB5sMduO619r/N7zTAguse6X9fx3QFpAYCIPEwFbDHf+UgK/XPAcxCGMAlB7YonBk7kcAAAAASUVORK5CYII=

        UnknownVisualDiffError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1092
                message: Unknown Visual Diff

        ### Lighthouse Reports

        LighthouseReportId:
            description: A unique Lighthouse Report ID
            example: 5f15a2312606f01255eb1a1c
            allOf:
                - $ref: '#/components/schemas/ObjectId'

        LighthouseReport:
            type: object
            properties:
                id:
                    $ref: '#/components/schemas/LighthouseReportId'
                alias:
                    type: string
                    description: A Service alias used for the Lighthouse Report
                    example: foo
                config:
                    type: object
                    description:
                        A custom Lighthouse config used to create the Report.
                        https://github.com/GoogleChrome/lighthouse/blob/master/docs/configuration.md
                createdAt:
                    type: string
                    description: The timestamp of when the Lighthouse Report was created
                    format: date-time
                    example: 2019-10-07T19:40:37.628Z
                error:
                    type: string
                    description: If there was an error while generating the Lighthouse Report, it is stored here
                full_url:
                    type: string
                    description: The full URL used to generate the Lighthouse Report
                preview:
                    $ref: '#/components/schemas/PreviewId'
                project:
                    $ref: '#/components/schemas/ProjectId'
                repo:
                    $ref: '#/components/schemas/RepoId'
                lighthouse:
                    $ref: '#/components/schemas/LighthouseReportId'
                screen:
                    type: string
                    description: The size of screen emulated for the Lighthouse Report.
                    enum: [desktop, mobile]
                    default: desktop
                service:
                    $ref: '#/components/schemas/ServiceId'
                summary:
                    type: array
                    description: Summary of the Lighthouse Report category scores
                    items:
                        type: object
                        properties:
                            id:
                                type: string
                                description: The category ID
                            title:
                                type: string
                                description: The human-readable title of the category
                            score:
                                type: number
                                format: float
                                description: The score assigned to the category
                    example:
                        accessibility:
                            id: accessibility
                            title: Accessibility
                            score: 0.88
                        best-practices:
                            id: best-practices
                            title: Best Practices
                            score: 0.72
                type:
                    type: string
                    enum: [lighthouse]
                updatedAt:
                    type: string
                    format: date-time
                    description: The timestamp of when the Lighthouse Report was last modified
                    example: 2019-10-07T19:40:37.628Z
                url:
                    type: string
                    format: url
                    description: The relative URL of the Lighthouse Report
                    example: /about

        UnknownLighthouseReportError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1122
                message: Unknown Lighthouse Report

        RebuildLighthouseReportError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1126
                message: Cannot rebuild Lighthouse Report

        LighthouseReportsUnavailableError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1125
                message: Lighthouse Reports are disabled for this Project

        ### Mail

        MessageId:
            allOf:
                - $ref: '#/components/schemas/ObjectId'
            description: A unique Mail Message ID
            example: 5d9b842d52163c3f95508c26

        Message:
            type: object
            properties:
                attachments:
                    type: array
                    description: An array of attachments
                    readOnly: true
                    items:
                        $ref: '#/components/schemas/MessageAttachment'
                bcc:
                    type: array
                    readOnly: true
                    description: An array of Bcc addresses
                    items:
                        $ref: '#/components/schemas/MessageAddress'
                cc:
                    type: array
                    readOnly: true
                    description: An array of Cc addresses
                    items:
                        $ref: '#/components/schemas/MessageAddress'
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Message was created
                    example: 2019-10-07T20:08:59.569Z
                date:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Message was sent
                    example: 2019-10-07T20:08:59.000Z
                from:
                    type: array
                    readOnly: true
                    description: An array of From addresses
                    items:
                        $ref: '#/components/schemas/MessageAddress'
                headers:
                    type: object
                    readOnly: true
                    description: Email envelope headers
                    example:
                        content-transfer-encoding: 'Content-Transfer-Encoding: 8bit'
                        content-type: 'Content-Type: text/plain; charset="UTF-8"'
                        date: 'Date: Thu, 29 Aug 2019 16:01:37 +0000'
                        from: 'From: doris@example.com'
                        mime-version: 'MIME-Version: 1.0'
                        subject: 'Subject: test subject'
                        to: 'To: wilbur@example.com'
                html:
                    type: string
                    readOnly: true
                    description: The HTML version of the message. "false" when no HTML version is present.
                    example: <p>HTML version of the message</p>
                id:
                    allOf:
                        - $ref: '#/components/schemas/MessageId'
                    readOnly: true
                inReplyTo:
                    type: array
                    readOnly: true
                    items:
                        type: string
                message:
                    allOf:
                        - $ref: '#/components/schemas/MessageId'
                    readOnly: true
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                raw:
                    type: string
                    readOnly: true
                    description: The original unformatted email source
                read:
                    type: boolean
                    description: Whether the Message has been read or not
                    example: true
                references:
                    type: array
                    readOnly: true
                    items:
                        type: string
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                subject:
                    type: string
                    readOnly: true
                    description: The Message subject
                text:
                    type: string
                    readOnly: true
                    description: The plaintext version of the message
                    example: Plaintext version of the message
                to:
                    type: array
                    readOnly: true
                    description: An array of To addresses
                    items:
                        $ref: '#/components/schemas/MessageAddress'
                type:
                    type: string
                    readOnly: true
                    enum: [message]
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Message was last modified
                    example: 2019-10-08T01:51:13.637Z

        MessageAddress:
            type: object
            properties:
                address:
                    type: string
                    format: email
                name:
                    type: string
                    example: User Name

        MessageAttachment:
            type: object
            properties:
                type:
                    type: string
                    example: attachment
                content:
                    type: string
                    format: byte
                    example: VHVnYm9hdCBBdHRhY2htZW50Cg==
                contentType:
                    type: string
                    example: text/plain
                partId:
                    type: string
                    example: 2
                release:
                    type: string
                contentDisposition:
                    type: string
                    example: attachment
                filename:
                    type: string
                    example: tugboat.txt
                headers:
                    type: object
                    additionalProperties:
                        allOf:
                            - $ref: '#/components/schemas/MessageAttachmentHeader'
                checksum:
                    type: string
                    example: 7a0aaa23a145e887aa1345e5f5a0863e
                size:
                    type: integer
                    example: 123

        MessageAttachmentHeader:
            type: object
            properties:
                value:
                    type: string
                params:
                    type: object
                    additionalProperties:
                        type: string

        UnknownMessageError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1034
                message: Unknown Mail Message

        ### Registries

        RegistryId:
            allOf:
                - $ref: '#/components/schemas/ObjectId'
            description: A unique Docker Registry ID
            example: 5fd998f13cfaf8595b3f2bbc

        Registry:
            type: object
            properties:
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Docker registry was added to Tugboat
                    example: 2019-10-07T20:08:59.569Z
                email:
                    type: string
                    description: An email address associated with the registry account
                    example: user@example.com
                id:
                    allOf:
                        - $ref: '#/components/schemas/RegistryId'
                    readOnly: true
                password:
                    type: string
                    format: password
                    description: The password used for authentication to the Docker registry
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                serveraddress:
                    type: string
                    description: The hostname or IP address of the Docker registry
                    example: registry.example.com
                registry:
                    allOf:
                        - $ref: '#/components/schemas/RegistryId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                type:
                    type: string
                    readOnly: true
                    enum: [registry]
                username:
                    type: string
                    description: The username used for authentication to the Docker registry
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Docker registry config was last modified
                    example: 2019-10-08T01:51:13.637Z

        UnknownRegistryError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1063
                message: Unknown Registry

        ### Jobs

        JobId:
            allOf:
                - $ref: '#/components/schemas/ObjectId'
            description: A unique Job ID
            example: 5d9e0a3f7f02ad896974a975

        Job:
            type: object
            properties:
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - build
                        - clone
                        - keygen
                        - rebuild
                        - refresh
                        - rekey
                        - reset
                        - start
                        - stop
                        - suspend
                        - update
                args:
                    type: object
                    description: The arguments for the action performed by the Job
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp when the Job was created
                endedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp of when the Job completed
                id:
                    allOf:
                        - $ref: '#/components/schemas/JobId'
                    readOnly: true
                job:
                    allOf:
                        - $ref: '#/components/schemas/JobId'
                    readOnly: true
                key:
                    allOf:
                        - $ref: '#/components/schemas/KeyId'
                    readOnly: true,
                    description: The API Key used to create the job
                message:
                    type: string
                    readOnly: true
                    description: A summary of the job result
                object:
                    allOf:
                        - $ref: '#/components/schemas/ObjectId'
                    description: The Object ID that the Job is for
                result:
                    type: string
                    enum:
                        - success
                        - error
                        - cancelled
                    readOnly: true
                    description: The job result
                startedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp when the Job started
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the Job action applies to
                    enum:
                        - previews
                        - projects
                        - repos
                        - services
                type:
                    type: string
                    readOnly: true
                    enum: [job]
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: The timestamp when the Job was last modified

        ProjectJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - update
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the Job action applies to
                    enum:
                        - projects

        RepoJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - keygen
                        - update
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the Job action applies to
                    enum:
                        - repos

        PreviewJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - build
                        - clone
                        - rebuild
                        - refresh
                        - rekey
                        - reset
                        - start
                        - stop
                        - suspend
                        - update
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the Job action applies to
                    enum:
                        - previews

        ServiceJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - reset
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the Job action applies to
                    enum:
                        - services

        LighthouseReportJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - rebuild
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the job action applies to
                    enum:
                        - lighthouse

        ScreenshotJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - rebuild
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the job action applies to
                    enum:
                        - screenshots

        VisualDiffJob:
            allOf:
                - $ref: '#/components/schemas/Job'
            properties:
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    readOnly: true
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    readOnly: true
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    readOnly: true
                service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    readOnly: true
                screenshot:
                    allOf:
                        - $ref: '#/components/schemas/VisualDiffId'
                    readOnly: true
                action:
                    type: string
                    description: The action performed by the Job
                    enum:
                        - rebuild
                target:
                    type: string
                    readOnly: true
                    description: The object collection that the job action applies to
                    enum:
                        - visualdiffs

        UnknownJobError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1106
                message: Unknown Job

        InvalidJobTypeError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1112
                message: Cannot cancel this type of job

        JobNotRunningError:
            allOf:
                - $ref: '#/components/schemas/Error'
            example:
                code: 1113
                message: Job has already finished

        ### Statistics

        Statistics:
            type: object
            properties:
                item:
                    type: string
                    description: The type of data represented by this data point
                    enum:
                        - build-time
                        - refresh-time
                        - size
                        - repos
                        - previews
                        - services
                #max:
                #    type: number
                #    description:
                #        This is the largest value observed over the period represented by an aggregated data point
                #min:
                #    type: number
                #    description:
                #        This is the smalles value observed over the period represented by an aggregated data point
                #period:
                #    type: number
                #    description:
                #        The number of hours after the timestamp that this data point represents. When not present, the
                #        data point is a point-in-time value
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                    description: The Preview that this data point is tied to
                project:
                    allOf:
                        - $ref: '#/components/schemas/ProjectId'
                    description: The Project that this data point is tied to
                repo:
                    allOf:
                        - $ref: '#/components/schemas/RepoId'
                    description: The Repository that this data point is tied to
                service:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                    description: The Service that this data point is tied to
                timestamp:
                    type: string
                    format: date-time
                    description: The timestamp of when the data point was sampled
                value:
                    type: number
                    description: The value of this data point

        ### Log

        Log:
            type: object
            properties:
                job:
                    allOf:
                        - $ref: '#/components/schemas/JobId'
                    readOnly: true
                level:
                    type: string
                    enum: [info, stdin, stdout, stderr]
                message:
                    type: string
                    description: The actual log message
                preview:
                    allOf:
                        - $ref: '#/components/schemas/PreviewId'
                services:
                    allOf:
                        - $ref: '#/components/schemas/ServiceId'
                timestamp:
                    type: string
                    format: date-time
                    description: The timestamp of when the log entry was created

        ### Metadata

        ProviderName:
            type: string
            description: A supported git provider
            enum:
                - bitbucket
                - git
                - github
                - gitlab
                - stash

        PreviewState:
            type: string
            description: The current Preview state
            example: ready
            enum:
                - building
                - cancelled
                - failed
                - new
                - pending
                - ready
                - rebuilding
                - refreshing
                - resetting
                - resuming
                - starting
                - stopped
                - stopping
                - suspended
                - suspending

        ServiceState:
            type: string
            description: The current Service state
            example: ready
            enum:
                - building
                - cancelled
                - failed
                - new
                - pending
                - ready
                - rebuilding
                - refreshing
                - resetting
                - resuming
                - starting
                - stopped
                - stopping
                - suspended
                - suspending
                - waiting

        SSHKey:
            type: object
            properties:
                type:
                    type: string
                    description: The SSH key type
                    enum:
                        - dsa
                        - ecdsa
                        - ed25519
                        - rsa
                    default: rsa
                    example: rsa
                bits:
                    type: number
                    description: |
                        The SSH key bit length

                        * `rsa` keys must have a minimum bit size of `1024`. The default is `4096`.
                        * `dsa` keys have a fixed bit size of `1024`. Any other value specified here is
                          ignored.
                        * `ecdsa` keys must have a bit size of `256`, `384`, or `521`. The default is
                          `256`
                        * `ed25519` keys have a fixed length. Any value specified here is ignored.
                    example: 4096
